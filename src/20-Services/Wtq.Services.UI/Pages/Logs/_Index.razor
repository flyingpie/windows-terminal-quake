@using Serilog.Events

@page "/logs"

@inject InAppLogSink Logs

@code {

	private HashSet<LogEventLevel> _levels = new()
	{
		LogEventLevel.Fatal,
		LogEventLevel.Error,
		LogEventLevel.Warning,
		LogEventLevel.Information,

		// Disabling these levels for now, as they slow down the UI too much.
		// LogEventLevel.Debug,
		// LogEventLevel.Verbose,
	};

	private string? _searchTerm;

	public ICollection<LogEvent> DataFiltered => Logs.Events
		.Where(e => _levels.Contains(e.Level))
		.Where(e => e.MessageTemplate?.Text?.Contains(_searchTerm ?? string.Empty, StringComparison.OrdinalIgnoreCase) ?? false)
		.ToList();

	public BadgeStyle LogLevelToBadgeStyle(LogEventLevel level)
	{
		if (!_levels.Contains(level))
		{
			return BadgeStyle.Dark;
		}

		return level switch
		{
			LogEventLevel.Fatal => BadgeStyle.Danger,
			LogEventLevel.Error => BadgeStyle.Danger,
			LogEventLevel.Warning => BadgeStyle.Warning,
			LogEventLevel.Information => BadgeStyle.Primary,
			LogEventLevel.Debug => BadgeStyle.Info,
			LogEventLevel.Verbose => BadgeStyle.Light,
			_ => BadgeStyle.Secondary
		};
	}

	public ButtonStyle LogLevelToButtonStyle(LogEventLevel level)
	{
		if (!_levels.Contains(level))
		{
			return ButtonStyle.Dark;
		}

		return level switch
		{
			LogEventLevel.Fatal => ButtonStyle.Danger,
			LogEventLevel.Error => ButtonStyle.Danger,
			LogEventLevel.Warning => ButtonStyle.Warning,
			LogEventLevel.Information => ButtonStyle.Primary,
			LogEventLevel.Debug => ButtonStyle.Info,
			LogEventLevel.Verbose => ButtonStyle.Light,
			_ => ButtonStyle.Secondary
		};
	}

	protected override void OnInitialized()
	{
		Logs.OnEvent = () => InvokeAsync(StateHasChanged);
	}

	private void ToggleLevel(LogEventLevel level)
	{
		if (!_levels.Add(level))
		{
			_levels.Remove(level);
		}

		StateHasChanged();
	}

}

<PageHead Icon="subject">Logs</PageHead>

<RadzenStack Orientation="Orientation.Horizontal" class="rz-my-2">
	<RadzenTextBox Style="flex-grow: 1;" @bind-Value="_searchTerm" @oninput="@(i => _searchTerm = i.Value?.ToString())"></RadzenTextBox>
	<RadzenStack Orientation="Orientation.Horizontal">
		@foreach (var level in Enum.GetValues<LogEventLevel>())
		{
			<RadzenButton
				ButtonStyle="@LogLevelToButtonStyle(level)"
				Click="() => ToggleLevel(level)"
			>@level
			</RadzenButton>
		}
	</RadzenStack>
</RadzenStack>

<RadzenDataGrid
	Data="DataFiltered"
	PageSize="50"

	AllowAlternatingRows="true"
	AllowColumnPicking="true"
	AllowColumnResize="true"
	AllowPaging="true"
>
	<Columns>
		<RadzenDataGridColumn
			Property="@nameof(LogEvent.Timestamp)"
			SortOrder="SortOrder.Descending"
			Title="Time"
			Width="100px"
		>
			<Template Context="item">
				@item.Timestamp.ToString("HH:mm:ss")
			</Template>
		</RadzenDataGridColumn>
		<RadzenDataGridColumn
			Property="@nameof(LogEvent.Level)"
			Title="Level"
			Width="120px"
		>
			<Template Context="item">
				<RadzenBadge BadgeStyle="@LogLevelToBadgeStyle(item.Level)">@item.Level</RadzenBadge>
			</Template>
		</RadzenDataGridColumn>
		<RadzenDataGridColumn
			Property="Context"
			Title="Context"
			Width="320px"
		>
			<Template Context="item">
				@item.Properties.GetValueOrDefault("SourceContext")?.ToString()?.Trim('"')
			</Template>
		</RadzenDataGridColumn>
		<RadzenDataGridColumn
			Property="@nameof(LogEvent.MessageTemplate)"
			Title="Message"
		>
			<Template Context="item">
				<div style="white-space: pre-wrap !important;">@item.RenderMessage()</div>
				<div style="white-space: pre-wrap !important;">@item.Exception?.ToString()</div>
			</Template>
		</RadzenDataGridColumn>

	</Columns>
</RadzenDataGrid>

<style>
	td {
		vertical-align: top; /* Relevant for multi-line logs */
	}
</style>