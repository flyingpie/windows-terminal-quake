@page "/logs"
@using Microsoft.Extensions.Logging
@using Serilog.Events

@inject InAppLogSink Logs

@code {

	private HashSet<LogEventLevel> _levels = new()
	{
		LogEventLevel.Fatal,
		LogEventLevel.Error,
		LogEventLevel.Warning,
		LogEventLevel.Information,

		// LogEventLevel.Debug,
		// LogEventLevel.Verbose,
	};

	private string? _searchTerm;

	private static readonly HashSet<string> IgnoredProperties = new(StringComparer.OrdinalIgnoreCase)
	{
		"sourcecontext",
	};

	private RadzenDataGrid<LogEvent>? _grid;

	public BadgeStyle LogLevelToBadgeStyle(LogEventLevel level)
	{
		if (!_levels.Contains(level))
		{
			return BadgeStyle.Dark;
		}

		return level switch
		{
			LogEventLevel.Fatal => BadgeStyle.Danger,
			LogEventLevel.Error => BadgeStyle.Danger,
			LogEventLevel.Warning => BadgeStyle.Warning,
			LogEventLevel.Information => BadgeStyle.Primary,
			LogEventLevel.Debug => BadgeStyle.Info,
			LogEventLevel.Verbose => BadgeStyle.Light,
			_ => BadgeStyle.Secondary
		};
	}

	public ButtonStyle LogLevelToButtonStyle(LogEventLevel level)
	{
		if (!_levels.Contains(level))
		{
			return ButtonStyle.Dark;
		}

		return level switch
		{
			LogEventLevel.Fatal => ButtonStyle.Danger,
			LogEventLevel.Error => ButtonStyle.Danger,
			LogEventLevel.Warning => ButtonStyle.Warning,
			LogEventLevel.Information => ButtonStyle.Primary,
			LogEventLevel.Debug => ButtonStyle.Info,
			LogEventLevel.Verbose => ButtonStyle.Light,
			_ => ButtonStyle.Secondary
		};
	}

	protected override void OnInitialized()
	{
		Log.For("TestLog").LogCritical("Critical");
		Log.For("TestLog").LogDebug("Debug");
		Log.For("TestLog").LogError("Error");
		Log.For("TestLog").LogInformation("Information");
		Log.For("TestLog").LogTrace("Trace");
		Log.For("TestLog").LogWarning("Warning");

		Logs.OnEvent = () => InvokeAsync(async () => { await (_grid?.RefreshDataAsync() ?? Task.CompletedTask).NoCtx(); });
	}

	private void ToggleLevel(LogEventLevel level)
	{
		if (_levels.Contains(level))
		{
			_levels.Remove(level);
		}
		else
		{
			_levels.Add(level);
		}

		StateHasChanged();
	}

	private bool IsLevelOn(LogEventLevel level) => _levels.Contains(level);

}

<PageHead Icon="subject">Logs</PageHead>

<RadzenStack Orientation="Orientation.Horizontal" class="rz-my-2">
	@* <RadzenTextBox @bind-Value="Value" style="width: 100%;" @oninput="@(i => Value = i.Value?.ToString() ?? string.Empty)" /> *@
	<RadzenTextBox Style="flex-grow: 1;" @bind-Value="_searchTerm" @oninput="@(i => _searchTerm = i.Value?.ToString())"></RadzenTextBox>
	<RadzenStack Orientation="Orientation.Horizontal">
		@foreach (var level in Enum.GetValues<LogEventLevel>())
		{
			<RadzenButton
				ButtonStyle="@LogLevelToButtonStyle(level)"
				Click="() => ToggleLevel(level)"
			>@level
			</RadzenButton>
		}
	</RadzenStack>
</RadzenStack>

<RadzenDataGrid
	@ref="_grid"
	Data="Logs.Events.Where(e => _levels.Contains(e.Level)).Where(e => e.MessageTemplate?.Text?.Contains(_searchTerm ?? string.Empty, StringComparison.OrdinalIgnoreCase) ?? false)"
	Density="Density.Compact"
	AllowFiltering="true"
	AllowPaging="true"
	AllowSorting="true"
	PageSize="50"
>
	<Columns>
		<RadzenDataGridColumn
			Property="@nameof(LogEvent.Timestamp)"
			SortOrder="SortOrder.Descending"
			Title="Time"
			Width="100px"
		>
			<Template Context="item">
				@item.Timestamp.ToString("HH:mm:ss")
			</Template>
		</RadzenDataGridColumn>
		<RadzenDataGridColumn
			Property="@nameof(LogEvent.Level)"
			Title="Level"
			Width="120px"
		>
			<Template Context="item">
				<RadzenBadge BadgeStyle="@LogLevelToBadgeStyle(item.Level)">@item.Level</RadzenBadge>
			</Template>
		</RadzenDataGridColumn>
		<RadzenDataGridColumn
			Property="Context"
			Title="Context"
			Width="320px"
		>
			<Template Context="item">
				@item.Properties.GetValueOrDefault("SourceContext")?.ToString()?.Trim('"')
			</Template>
		</RadzenDataGridColumn>
		<RadzenDataGridColumn
			Property="@nameof(LogEvent.MessageTemplate)"
			Title="Message"
		>
			<Template Context="item">
				@item.RenderMessage()
			</Template>
		</RadzenDataGridColumn>

		@* <RadzenDataGridColumn *@
		@* 	Property="@nameof(LogEvent.Properties)" *@
		@* 	Title="@nameof(LogEvent.Properties)" *@
		@* > *@
		@* 	<Template Context="item"> *@
		@* 		@foreach (var p in item.Properties) *@
		@* 		{ *@
		@* 			<RadzenBadge Shade="Shade.Default" BadgeStyle="BadgeStyle.Primary" Text="@($"{p.Key}={p.Value}")"/> *@
		@* 		} *@
		@* 	</Template> *@
		@* </RadzenDataGridColumn> *@

	</Columns>
</RadzenDataGrid>

@* <table> *@
@* 	<tbody> *@
@* 		@foreach (var ev in Logs.Events.Reverse()) *@
@* 		{ *@
@* 			<tr> *@
@* 				<td style="min-width: 150px;">@ev.Timestamp.ToString("s")</td> *@
@* 				<td style="min-width: 100px;">@ev.Level</td> *@
@* 				<td>@ev.RenderMessage(null)</td> *@
@* 			</tr> *@
@* 		} *@
@* 	</tbody> *@
@* </table> *@