@using Serilog.Events

@page "/logs"

@inject InAppLogSink Logs

@code {
	private static LogEventLevel[] LogLevels = Enum.GetValues<LogEventLevel>();

	private readonly Debouncer _debouncer = new();

	private HashSet<LogEventLevel> _levels = new()
	{
		LogEventLevel.Fatal,
		LogEventLevel.Error,
		LogEventLevel.Warning,
		LogEventLevel.Information,
		// LogEventLevel.Debug,
		// LogEventLevel.Verbose,
	};

	private string? _searchTerm;

	public ICollection<LogEvent> DataFiltered => Logs.Events
		.Where(e => _levels.Contains(e.Level))
		.Where(e =>
		{
			var msg = e.RenderMessage();

			return string.IsNullOrWhiteSpace(_searchTerm) ||
				e.Properties.Any(p => p.Value?.ToString()?.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
				(msg?.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ?? false);
		})
		.ToList();

	public BadgeStyle LogLevelToBadgeStyle(LogEventLevel level) => level switch
	{
		LogEventLevel.Fatal => BadgeStyle.Danger,
		LogEventLevel.Error => BadgeStyle.Danger,
		LogEventLevel.Warning => BadgeStyle.Warning,
		LogEventLevel.Information => BadgeStyle.Primary,
		LogEventLevel.Debug => BadgeStyle.Info,
		LogEventLevel.Verbose => BadgeStyle.Light,
		_ => BadgeStyle.Secondary
	};

	public ButtonStyle LogLevelToButtonStyle(LogEventLevel level) => level switch
	{
		LogEventLevel.Fatal => ButtonStyle.Danger,
		LogEventLevel.Error => ButtonStyle.Danger,
		LogEventLevel.Warning => ButtonStyle.Warning,
		LogEventLevel.Information => ButtonStyle.Primary,
		LogEventLevel.Debug => ButtonStyle.Info,
		LogEventLevel.Verbose => ButtonStyle.Light,
		_ => ButtonStyle.Secondary
	};

	protected override void OnInitialized()
	{
		Logs.OnEvent = () => _debouncer.Debounce(() => InvokeAsync(StateHasChanged));
	}

	#region Levels

	private bool IsFatalEnabled
	{
		get => _levels.Contains(LogEventLevel.Fatal);
		set => ToggleLevel(LogEventLevel.Fatal);
	}

	private bool IsErrorEnabled
	{
		get => _levels.Contains(LogEventLevel.Error);
		set => ToggleLevel(LogEventLevel.Error);
	}

	private bool IsWarningEnabled
	{
		get => _levels.Contains(LogEventLevel.Warning);
		set => ToggleLevel(LogEventLevel.Warning);
	}

	private bool IsInformationEnabled
	{
		get => _levels.Contains(LogEventLevel.Information);
		set => ToggleLevel(LogEventLevel.Information);
	}

	private bool IsDebugEnabled
	{
		get => _levels.Contains(LogEventLevel.Debug);
		set => ToggleLevel(LogEventLevel.Debug);
	}

	private bool IsVerboseEnabled
	{
		get => _levels.Contains(LogEventLevel.Verbose);
		set => ToggleLevel(LogEventLevel.Verbose);
	}

	#endregion

	private void ToggleLevel(LogEventLevel level)
	{
		if (!_levels.Add(level))
		{
			_levels.Remove(level);
		}

		StateHasChanged();
	}

}

<PageHead Icon="subject">Logs</PageHead>

<RadzenStack Orientation="Orientation.Horizontal" class="rz-my-2" AlignItems="AlignItems.Center">
	<RadzenTextBox
		Style="flex-grow: 1;"
		@bind-Value="_searchTerm"
		@oninput="@(i => _searchTerm = i.Value?.ToString())"
		Placeholder="Searchterm..."
	/>

	<RadzenStack Orientation="Orientation.Horizontal">

		<RadzenBadge BadgeStyle="LogLevelToBadgeStyle(LogEventLevel.Verbose)">
			<RadzenCheckBox Name="@($"chk-log-level-1")" @bind-Value="IsVerboseEnabled" />
			<RadzenLabel Text="Verbose" Component="@($"chk-log-level-1")" class="rz-ms-2" />
		</RadzenBadge>

		<RadzenBadge BadgeStyle="LogLevelToBadgeStyle(LogEventLevel.Debug)">
			<RadzenCheckBox Name="@($"chk-log-level-2")" @bind-Value="IsDebugEnabled" />
			<RadzenLabel Text="Debug" Component="@($"chk-log-level-2")" class="rz-ms-2" />
		</RadzenBadge>

		<RadzenBadge BadgeStyle="LogLevelToBadgeStyle(LogEventLevel.Information)">
			<RadzenCheckBox Name="@($"chk-log-level-3")" @bind-Value="IsInformationEnabled" />
			<RadzenLabel Text="Information" Component="@($"chk-log-level-3")" class="rz-ms-2" />
		</RadzenBadge>

		<RadzenBadge BadgeStyle="LogLevelToBadgeStyle(LogEventLevel.Warning)">
			<RadzenCheckBox Name="@($"chk-log-level-4")" @bind-Value="IsWarningEnabled" />
			<RadzenLabel Text="Warning" Component="@($"chk-log-level-4")" class="rz-ms-2" />
		</RadzenBadge>

		<RadzenBadge BadgeStyle="LogLevelToBadgeStyle(LogEventLevel.Error)">
			<RadzenCheckBox Name="@($"chk-log-level-5")" @bind-Value="IsErrorEnabled" />
			<RadzenLabel Text="Error" Component="@($"chk-log-level-5")" class="rz-ms-2" />
		</RadzenBadge>

		<RadzenBadge BadgeStyle="LogLevelToBadgeStyle(LogEventLevel.Fatal)">
			<RadzenCheckBox Name="@($"chk-log-level-6")" @bind-Value="IsFatalEnabled" />
			<RadzenLabel Text="Fatal" Component="@($"chk-log-level-6")" class="rz-ms-2" />
		</RadzenBadge>

	</RadzenStack>
</RadzenStack>

<RadzenDataGrid
	Data="DataFiltered"
	PageSize="50"

	AllowAlternatingRows="true"
	AllowColumnPicking="true"
	AllowColumnResize="true"
	AllowPaging="true"
>
	<Columns>
		<RadzenDataGridColumn
			Property="@nameof(LogEvent.Timestamp)"
			SortOrder="SortOrder.Descending"
			Title="Time"
			Width="100px"
		>
			<Template Context="item">
				@item.Timestamp.ToString("HH:mm:ss")
			</Template>
		</RadzenDataGridColumn>
		<RadzenDataGridColumn
			Property="@nameof(LogEvent.Level)"
			Title="Level"
			Width="120px"
		>
			<Template Context="item">
				<RadzenBadge BadgeStyle="@LogLevelToBadgeStyle(item.Level)">@item.Level</RadzenBadge>
			</Template>
		</RadzenDataGridColumn>
		<RadzenDataGridColumn
			Property="Context"
			Title="Context"
			Width="320px"
		>
			<Template Context="item">
				@item.Properties.GetValueOrDefault("SourceContext")?.ToString()?.Trim('"')
			</Template>
		</RadzenDataGridColumn>
		<RadzenDataGridColumn
			Property="@nameof(LogEvent.MessageTemplate)"
			Title="Message"
		>
			<Template Context="item">
				<div style="white-space: pre-wrap !important;">@item.RenderMessage()</div>
				<div style="white-space: pre-wrap !important;">@item.Exception?.ToString()</div>
			</Template>
		</RadzenDataGridColumn>

	</Columns>
</RadzenDataGrid>

<style>
	td {
		vertical-align: top; /* Relevant for multi-line logs */
	}
</style>