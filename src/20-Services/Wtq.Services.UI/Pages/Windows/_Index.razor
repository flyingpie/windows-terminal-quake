@page "/windows"

@inject IWtqWindowService WindowService

@code {
	private ICollection<WtqWindow> _windows = [];
	private ICollection<WtqWindowProperty> _props = null!;
	private string? _searchTerm;

	public ICollection<WtqWindow> Windows =>
		_windows
			.Where(w => string.IsNullOrWhiteSpace(_searchTerm) || w.MatchesString(_searchTerm))
			.OrderBy(w => w.Name)
			.ToList();

	protected override async Task OnInitializedAsync()
	{
		_props = WindowService.GetWindowProperties();
		_windows = await WindowService.GetWindowsAsync(CancellationToken.None);
	}

}

<PageHead Icon="select_window">Windows</PageHead>
<p>List of windows that WTQ can see. Properties in this list can be used as criteria in the settings.</p>

<RadzenStack Orientation="Orientation.Horizontal" class="rz-my-2">
	<RadzenTextBox
		Style="flex-grow: 1;"
		@bind-Value="_searchTerm"
		@oninput="@(i => _searchTerm = i.Value?.ToString())"
		Placeholder="Filter"
	/>
</RadzenStack>

<RadzenDataGrid
	Data="@Windows"
	PageSize="50"

	AllowAlternatingRows="true"
	AllowColumnPicking="true"
	AllowColumnResize="true"
	AllowPaging="true"
>
	<Columns>

		@foreach (var prop in _props)
		{
			<RadzenDataGridColumn
				Property="@prop.Name"
				SortProperty="@prop.Name"
				Title="@prop.Name"
				Visible="@prop.Visible"
				Width="@(prop.Width != null ? $"{prop.Width.ToString()}px" : "")"
			>
				<Template Context="item">
					<RadzenStack
						Orientation="Orientation.Horizontal"
						JustifyContent="JustifyContent.SpaceBetween"
					>
						<span>@prop.Accessor(item)</span>
						@* TODO: Add clipboard support *@
						@* <RadzenButton Icon="content_copy" Size="ButtonSize.ExtraSmall" ButtonStyle="ButtonStyle.Dark" IconColor="@Colors.Base500" title="@($"Copy '{@prop.Accessor(item)}'")" Click="_ => ClipboardService.CopyToClipboardAsync(prop.Accessor(item)?.ToString() ?? string.Empty)"/> *@
					</RadzenStack>
				</Template>
			</RadzenDataGridColumn>
		}

	</Columns>
</RadzenDataGrid>