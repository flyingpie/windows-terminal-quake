@page "/windows"

@inject IWtqWindowService WindowService

@code {
	private List<WtqWindow> _windows = [];
	private List<WtqWindowProperty> _props = null!;

	protected override async Task OnInitializedAsync()
	{
		_props = WindowService.GetWindowProperties();
		_windows = (await WindowService.GetWindowsAsync(CancellationToken.None)).OrderBy(w => w.Name).ToList();
	}

}

<PageHead Icon="select_window">Windows</PageHead>
<p>List of windows that WTQ can see. Properties in this list can be used as criteria in the settings.</p>

<RadzenDataGrid
	AllowColumnResize="true"
	AllowFiltering="true"
	AllowPaging="true"
	AllowSorting="true"
	Count="@_windows.Count"
	Data="@_windows"
	GridLines="DataGridGridLines.Both"
	PageSize="50"
>
	<Columns>

		@foreach (var prop in _props)
		{
			<RadzenDataGridColumn Width="320px" Property="@prop.Name" Title="@prop.Name">
				<Template Context="item">
					<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
						<span>@prop.Accessor(item)</span>
						<RadzenLink Icon="content_copy"/>
					</RadzenStack>
				</Template>
			</RadzenDataGridColumn>
		}

	</Columns>
</RadzenDataGrid>