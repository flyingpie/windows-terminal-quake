@using Microsoft.Extensions.Options
@using Wtq.Configuration

@inject IOptions<WtqOptions> WtqOptions

@page "/Apps/{AppId}"

@code {

	[Parameter] public string AppId { get; set; }

	public WtqAppOptions? _opts;

	public int radioButtonValue;

	public int value;
	public string? value1;
	public bool valuec;

	public AnimationType animOn;

	public float HorizontalScreenCoverage
	{
		get => _opts?.HorizontalScreenCoverage ?? WtqOptions.Value.HorizontalScreenCoverage;
		set => _opts.HorizontalScreenCoverage = value;
	}

	public float VerticalScreenCoverage
	{
		get => _opts?.VerticalScreenCoverage ?? WtqOptions.Value.VerticalScreenCoverage;
		set => _opts.VerticalScreenCoverage = value;
	}

	private Wtq.Configuration.HorizontalAlign _horizontalAlign;
	private string test1;

	protected override async Task OnInitializedAsync()
	{
		_opts = WtqOptions.Value.GetAppOptionsByNameRequired(AppId);
	}

	private void HandleKeyDown(KeyboardEventArgs e)
	{
		value1 = $"[CTRL:{e.CtrlKey} ALT:{e.AltKey} SHIFT:{e.ShiftKey} META:{e.MetaKey}] KEY:{e.Key} CODE:{e.Code} REPEAT:{e.Repeat} TYPE:{e.Type}";
	}

	private void ResetProp(Action reset)
	{
		reset();

		StateHasChanged();
	}
}

<h1>App <span class="rz-color-primary">@AppId</span></h1>
APP @_opts?.Name

@if (_opts == null)
{
	<span>NULL</span>
}

<RadzenStack>
	<RadzenFieldset Text="App">
		<RadzenStack Gap="1rem">

			<RadzenRow AlignItems="AlignItems.Start">
				<SettingLabel Text="Name" Component="Name"/>
				<RadzenColumn Size="7">
					<RadzenTextBox @bind-Value="@AppId" Name="Name" style="width: 100%;"/>

					<Descr>
						A descriptive name, mostly used for logging.
					</Descr>
				</RadzenColumn>
			</RadzenRow>

			<RadzenRow AlignItems="AlignItems.Start">
				<SettingLabel Text="Hotkeys"/>
				<RadzenColumn Size="7">
					<RadzenTextBox
						Style="width: 100%;"
						Name="s"
						@onkeydown="HandleKeyDown"
						Placeholder="Type here to set hotkey."
						@bind-Value="@value1"
					/>

					<Descr>What hotkeys should toggle the app. Select the textbox and press the desired key combo.
					</Descr>
				</RadzenColumn>
				<SettingGlobal/>
			</RadzenRow>
		</RadzenStack>
	</RadzenFieldset>

	<RadzenFieldset Text="Process">
		<RadzenStack Gap="1rem">

			<RadzenRow AlignItems="AlignItems.Start">
				<SettingLabel Text="Filename" Component="FileName"/>
				<RadzenColumn Size="7">
					<RadzenTextBox @bind-Value="@value1" Name="FileName" style="width: 100%;"/>

					<Descr>
						The
						<Emph>filename</Emph>
						to use when starting a new process
						for the app. Eg.
						<Emph>notepad</Emph>
						,
						<Emph>dolphin</Emph>
						, etc.
					</Descr>
				</RadzenColumn>
			</RadzenRow>

			<RadzenRow AlignItems="AlignItems.Start">
				<SettingLabel Text="Process name" Component="ProcessName" IsOptional="true"/>
				<RadzenColumn Size="7">
					<RadzenTextBox @bind-Value="@value1" Name="ProcessName" style="width: 100%;"/>

					<Descr>
						Apps sometimes have
						<Emph>process names</Emph>
						different
						from their
						<Emph>filenames</Emph>
						. This field can be used
						to look for the process name in such cases. Windows Terminal is
						an example, with filename
						<Emph>wt</Emph>
						, and process name
						<Emph>WindowsTerminal</Emph>
						.
					</Descr>
				</RadzenColumn>
				<SettingGlobal/>
			</RadzenRow>

			<RadzenRow AlignItems="AlignItems.Start">
				<SettingLabel Text="Arguments" Component="Arguments" IsOptional="true"/>
				<RadzenColumn Size="7">
					<RadzenTextBox Style="width: 100%;" Name="Arguments"/>

					<Descr>
						Additional
						<Emph>arguments</Emph>
						to pass to the process, when
						starting a new one.
					</Descr>
				</RadzenColumn>
				<SettingGlobal/>
			</RadzenRow>

			<RadzenRow AlignItems="AlignItems.Start">
				<SettingLabel Text="Attach mode" Component="AttachMode"/>
				<RadzenColumn Size="7">
					<RadzenRadioButtonList @bind-Value=@radioButtonValue TValue="int"
					                       Orientation="Orientation.Vertical">
						<Items>
							<RadzenRadioButtonListItem Value="1" Text="Find or Start"/>
							<RadzenRadioButtonListItem Value="2" Text="Find only"/>
							<RadzenRadioButtonListItem Value="3" Text="Start always" Disabled="true"/>
							<RadzenRadioButtonListItem Value="4" Text="Manual"/>
						</Items>
					</RadzenRadioButtonList>

					<Descr>
						How to get a reference to a running app.<br/>
						<Emph>Find or Start</Emph>
						looks for an existing instance, and creates one should none exist.<br/>
						<Emph>Find only</Emph>
						looks for an existing app instance, and does nothing should none be found.<br/>
						<Emph>Start always</Emph>
						always creates a new app instance, even if one already exists.<br/>
						<Emph>Maual</Emph>
						attaches to whatever app has focus, when the hotkey is pressed.
					</Descr>
				</RadzenColumn>
				<SettingGlobal HasGlobalSetting="true"/>
			</RadzenRow>

			<RadzenRow AlignItems="AlignItems.Start">
				<SettingLabel Text="Window title" Component="WindowTitle" IsOptional="true"/>
				<RadzenColumn Size="7">
					<RadzenTextBox @bind-Value="@value1" Name="WindowTitle" style="width: 100%;"/>

					<Descr>

					</Descr>
				</RadzenColumn>
				<SettingGlobal/>
			</RadzenRow>

		</RadzenStack>
	</RadzenFieldset>

	<RadzenFieldset Text="Behavior">
		<RadzenStack Gap="1rem">

			<RadzenRow AlignItems="AlignItems.Start">
				<SettingLabel Text="Always on top" Component="AlwaysOnTop"/>
				<RadzenColumn Size="7">
					<RadzenCheckBox @bind-Value=@valuec Name="AlwaysOnTop"/>

					<Descr>Keep the app on top of other windows, even on focus lost.</Descr>
				</RadzenColumn>
				<SettingGlobal HasGlobalSetting="true"/>
			</RadzenRow>

			<RadzenRow AlignItems="AlignItems.Start">
				<SettingLabel Text="Hide on focus lost" Component="HideOnFocusLost"/>
				<RadzenColumn Size="7">
					<RadzenRadioButtonList @bind-Value=@radioButtonValue TValue="int"
					                       Orientation="Orientation.Vertical">
						<Items>
							<RadzenRadioButtonListItem Value="1" Text="Always"/>
							<RadzenRadioButtonListItem Value="2" Text="Never"/>
							<RadzenRadioButtonListItem Value="3" Text="Unless focus changed screen" Disabled="true"/>
						</Items>
					</RadzenRadioButtonList>

					<Descr>Whether the app should
						<Emph>toggle off</Emph>
						when focus lost.
					</Descr>
				</RadzenColumn>
				<SettingGlobal HasGlobalSetting="true"/>
			</RadzenRow>

			<RadzenRow AlignItems="AlignItems.Start">
				<SettingLabel Text="Taskbar icon visibility" Component="TaskbarIconVisibility"/>
				<RadzenColumn Size="7">
					<RadzenRadioButtonList @bind-Value=@radioButtonValue TValue="int"
					                       Orientation="Orientation.Vertical">
						<Items>
							<RadzenRadioButtonListItem Value="1" Text="Always"/>
							<RadzenRadioButtonListItem Value="2" Text="Never"/>
							<RadzenRadioButtonListItem Value="3" Text="When app visible" Disabled="true"/>
						</Items>
					</RadzenRadioButtonList>

					<Descr>If and when the app icon should be visible on the
						<Emph>taskbar</Emph>
						.
					</Descr>
				</RadzenColumn>
				<SettingGlobal HasGlobalSetting="true"/>
			</RadzenRow>

			<RadzenRow AlignItems="AlignItems.Start">
				<SettingLabel Text="Opacity" Component="Opacity"/>
				<RadzenColumn Size="7">
					<RadzenNumeric @bind-Value="@value" Name="Opacity" class="rz-mr-4" style="width: 80px;"/>
					<RadzenSlider @bind-Value=@value TValue="int"/>

					<Descr>Makes the entire app window transparent. Note that this includes the title bar.</Descr>
				</RadzenColumn>
				<SettingGlobal HasGlobalSetting="true"/>
			</RadzenRow>

			<RadzenRow AlignItems="AlignItems.Start">
				<SettingLabel Text="Window Title Override" Component="WindowTitleOverride" IsOptional="true"/>
				<RadzenColumn Size="7">
					<RadzenTextBox @bind-Value="@value1" Name="WindowTitleOverride" style="width: 100%;"/>

					<Descr>
						Attempt to set the app
						<Emph>window title</Emph>
						to this value.
						Note that this may work for some apps.
					</Descr>
				</RadzenColumn>
				<SettingGlobal HasGlobalSetting="true"/>
			</RadzenRow>

		</RadzenStack>
	</RadzenFieldset>

	<RadzenFieldset Text="Position">
		<RadzenStack Gap="1rem">

			<RadzenRow AlignItems="AlignItems.Start">
				<SettingLabel Text="Horizontal screen coverage (%)" Component="HorizontalScreenCoverage"/>
				<RadzenColumn Size="7">
					<RadzenNumeric @bind-Value="@HorizontalScreenCoverage" Name="HorizontalScreenCoverage" class="rz-mr-4" style="width: 80px;"/>
					<RadzenSlider @bind-Value=@HorizontalScreenCoverage TValue="float"/>
					<Descr>How <Emph>wide</Emph> the app window should be.</Descr>
				</RadzenColumn>
				<SettingGlobal HasGlobalSetting="true" IsOverridden="@(_opts?.HorizontalScreenCoverage != null)" Reset="@(() => ResetProp(() => _opts.HorizontalScreenCoverage = null))" />
			</RadzenRow>

			<RadzenRow AlignItems="AlignItems.Start">
				<SettingLabel Text="Vertical screen coverage (%)" Component="VerticalScreenCoverage"/>
				<RadzenColumn Size="7">
					<RadzenNumeric @bind-Value="@VerticalScreenCoverage" Name="VerticalScreenCoverage" class="rz-mr-4" style="width: 80px;"/>
					<RadzenSlider @bind-Value="@VerticalScreenCoverage" TValue="float"/>
					<Descr>How <Emph>tall</Emph> the app window should be.</Descr>
				</RadzenColumn>
				<SettingGlobal HasGlobalSetting="true" IsOverridden="@(_opts?.VerticalScreenCoverage != null)" Reset="@(() => ResetProp(() => _opts.VerticalScreenCoverage = null))" />
			</RadzenRow>

			<RadzenRow AlignItems="AlignItems.Start">
				<SettingLabel Text="Horizontal align" Component="HorizontalAlign"/>
				<RadzenColumn Size="7">
					<RadzenRadioButtonList
						@bind-Value="@_horizontalAlign"
						TValue="Wtq.Configuration.HorizontalAlign"
						Orientation="Orientation.Vertical"
					>
						<Items>
							<RadzenRadioButtonListItem Value="Wtq.Configuration.HorizontalAlign.Center" Text="Center"/>
							<RadzenRadioButtonListItem Value="Wtq.Configuration.HorizontalAlign.Left" Text="Left"/>
							<RadzenRadioButtonListItem Value="Wtq.Configuration.HorizontalAlign.Right" Text="Right"/>
						</Items>
					</RadzenRadioButtonList>

					<Descr>How many times per second to update the app position.</Descr>
				</RadzenColumn>
				<SettingGlobal HasGlobalSetting="true"/>
			</RadzenRow>

			<RadzenRow AlignItems="AlignItems.Start">
				<SettingLabel Text="Vertical offset" Component="VerticalOffset"/>
				<RadzenColumn Size="7">
					<RadzenNumeric @bind-Value="@value" Name="VerticalOffset" class="rz-mr-4" style="width: 80px;"/>
					<RadzenSlider @bind-Value=@value TValue="int"/>

					<Descr>How many times per second to update the app position.</Descr>
				</RadzenColumn>
				<SettingGlobal HasGlobalSetting="true"/>
			</RadzenRow>

			<RadzenRow AlignItems="AlignItems.Start">
				<SettingLabel Text="Off-screen locations" Component="OffScreenLocations"/>
				<RadzenColumn Size="7">
					<RadzenNumeric @bind-Value="@value" Name="OffScreenLocations" class="rz-mr-4" style="width: 80px;"/>
					<RadzenSlider @bind-Value=@value TValue="int"/>

					<Descr>How many times per second to update the app position.</Descr>
				</RadzenColumn>
				<SettingGlobal HasGlobalSetting="true"/>
			</RadzenRow>

		</RadzenStack>
	</RadzenFieldset>

	<RadzenFieldset Text="Monitor">
		<RadzenStack Gap="1rem">

			<RadzenRow AlignItems="AlignItems.Start">
				<SettingLabel Text="Prefer monitor" Component="PreferMonitor"/>
				<RadzenColumn Size="7">
					<RadzenRadioButtonList @bind-Value=@radioButtonValue TValue="int"
					                       Orientation="Orientation.Vertical">
						<Items>
							<RadzenRadioButtonListItem Value="1" Text="With cursor"/>
							<RadzenRadioButtonListItem Value="2" Text="Primary"/>
							<RadzenRadioButtonListItem Value="3" Text="At index"/>
						</Items>
					</RadzenRadioButtonList>

					<Descr>
						What
						<Emph>monitor</Emph>
						to toggle onto.
					</Descr>
				</RadzenColumn>
				<SettingGlobal HasGlobalSetting="true"/>
			</RadzenRow>

			<RadzenRow AlignItems="AlignItems.Start">
				<SettingLabel Text="Monitor Index" Component="MonitorIndex"/>
				<RadzenColumn Size="7">
					<RadzenNumeric @bind-Value="@value" Name="MonitorIndex" class="rz-mr-4" style="width: 80px;"/>
					<RadzenSlider @bind-Value=@value TValue="int"/>

					<Descr>Which monitor to toggle the app onto.</Descr>
				</RadzenColumn>
				<SettingGlobal HasGlobalSetting="true"/>
			</RadzenRow>
		</RadzenStack>
	</RadzenFieldset>

	<RadzenFieldset Text="Animation">
		<RadzenStack Gap="1rem">

			<RadzenRow AlignItems="AlignItems.Start">
				<SettingLabel Text="Animation type (toggle on)" Component="AnimationTypeToggleOn"/>
				<RadzenColumn Size="7">
					<RadzenDropDown
						@bind-Value="animOn"
						Data=@(Enum.GetValues(typeof(AnimationType)))
						Style="width: 100%; max-width: 400px;"
						Name="AnimationTypeToggleOn"
					/>

					<Descr>
						The easing type to use when moving the app
						<Emph>onto</Emph>
						the screen.
					</Descr>
				</RadzenColumn>
				<SettingGlobal HasGlobalSetting="true"/>
			</RadzenRow>

			<RadzenRow AlignItems="AlignItems.Start">
				<SettingLabel Text="Animation type (toggle off)" Component="AnimationTypeToggleOff"/>
				<RadzenColumn Size="7">
					<RadzenDropDown
						@bind-Value="animOn"
						Data=@(Enum.GetValues(typeof(AnimationType)))
						Style="width: 100%; max-width: 400px;"
						Name="AnimationTypeToggleOff"
					/>

					<Descr>
						The easing type to use when moving the app
						<Emph>off</Emph>
						the screen.
					</Descr>
				</RadzenColumn>
				<SettingGlobal HasGlobalSetting="true"/>
			</RadzenRow>

			<RadzenRow AlignItems="AlignItems.Start">
				<SettingLabel Text="Animation duration" Component="AnimationDuration"/>
				<RadzenColumn Size="7">
					<RadzenNumeric @bind-Value="@value" Name="AnimationDuration" class="rz-mr-4" style="width: 80px;"/>
					<RadzenSlider @bind-Value=@value TValue="int"/>

					<Descr>How long it should take for the app to toggle onto or -off the screen.</Descr>
				</RadzenColumn>
				<SettingGlobal HasGlobalSetting="true"/>
			</RadzenRow>

			<RadzenRow AlignItems="AlignItems.Start">
				<SettingLabel Text="Animation target fps" Component="AnimationTargetFps"/>
				<RadzenColumn Size="7">
					<RadzenNumeric @bind-Value="@value" Name="AnimationTargetFps" class="rz-mr-4" style="width: 80px;"/>
					<RadzenSlider @bind-Value=@value TValue="int"/>

					<Descr>How many times per second to update the app position.</Descr>
				</RadzenColumn>
				<SettingGlobal HasGlobalSetting="true"/>
			</RadzenRow>

		</RadzenStack>
	</RadzenFieldset>

</RadzenStack>








