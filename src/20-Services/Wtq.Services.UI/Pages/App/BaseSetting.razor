@using System.ComponentModel.DataAnnotations
@using System.Linq.Expressions
@code {

	protected string _id = Guid.NewGuid().ToString();

	public string SettingName { get; set; }

	[CascadingParameter]
	public WtqOptions GlobalOpts { get; set; } = null!;

	[CascadingParameter]
	public WtqAppOptions AppOpts { get; set; } = null!;

	[CascadingParameter]
	public Notifier Notifier { get; set; } = null!;

	public IEnumerable<ValidationResult> ValidationResults
	{
		get => AppOpts.Validate(new ValidationContext(new object())).Where(v => v.MemberNames.Any(m => m.Equals(SettingName, StringComparison.Ordinal)));
	}

	public IEnumerable<ValidationResult> ValidationResultsFor(Expression<Func<WtqAppOptions, object>> expr)
		=> AppOpts.Validate(new ValidationContext(new object())).Where(v => v.MemberNames.Any(m => m.Equals("x", StringComparison.Ordinal)));

	public IEnumerable<ValidationResult> ValidationResultsFor(string componentName)
		=> AppOpts.Validate(new ValidationContext(new object())).Where(v => v.MemberNames.Any(m => m.Equals(componentName, StringComparison.Ordinal)));

	// private string LabelClass
	// 	=> AppOpts.Validate(new ValidationContext(new object())).Any(v => v.MemberNames.Any(m => m.Equals(Component, StringComparison.Ordinal)))
	// 	? "rz-color-danger-light"
	// 	: "";

	protected override void OnInitialized()
	{
		Notifier.OnNotify(() => InvokeAsync(() => StateHasChanged()));
	}

	protected void WithNotify(Action action)
	{
		action();

		Notifier.Notify();
	}

}