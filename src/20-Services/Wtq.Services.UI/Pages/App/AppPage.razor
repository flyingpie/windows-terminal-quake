@using Wtq.Services.UI.Pages.App.Animation
@using Wtq.Services.UI.Pages.App.App
@using Wtq.Services.UI.Pages.App.Behavior
@using Wtq.Services.UI.Pages.App.Monitor
@using Wtq.Services.UI.Pages.App.Position
@using Wtq.Services.UI.Pages.App.Process

@inject IOptionsMonitor<WtqOptions> WtqOpts
@inject Notifier Notifier
@inject NavigationManager NavMan
@inject WtqOptionsSaveService SaveService

@page "/apps/{AppId}"

@code {

	private bool _hasChanged;

	[NotNull]
	[Parameter]
	public string? AppId { get; set; }

	public WtqAppOptions AppOpts { get; set; }

	public WtqOptions GlobalOpts { get; set; }

	protected override void OnInitialized()
	{
		Notifier.OnNotify(() => InvokeAsync(StateHasChanged));

		GlobalOpts = WtqOpts.CurrentValue;
		AppOpts = GlobalOpts.GetAppOptionsByNameRequired(AppId);

		// Notify when the settings file changes, to prevent overwriting settings that were made outside of the UI.
		WtqOpts.OnChange((_, _) =>
		{
			_hasChanged = true;

			InvokeAsync(StateHasChanged);
		});
	}

	private async Task SaveAsync()
	{
		await SaveService.SaveAsync(GlobalOpts).NoCtx();

		Reload();
	}

	private void Reload()
	{
		NavMan.NavigateTo($"/apps/{AppOpts.Name}", forceLoad: true);
	}

}

<PageHead Icon="circle">
	App <span class="rz-color-primary">@AppId</span>
</PageHead>

<CascadingValue Value="GlobalOpts">
<CascadingValue Value="AppOpts">
<CascadingValue Value="Notifier">

	<RadzenStack>

		@* Warn about outside file changes. *@
		<RadzenAlert AllowClose="false" AlertStyle="AlertStyle.Warning" Icon="warning" Visible="_hasChanged">
			The settings file has changed, be aware that saving anything here will overwrite on-disk changes.
			<RadzenButton Text="Reload" Click="Reload"/>
		</RadzenAlert>

		<RadzenFieldset Text="App">
			<RadzenStack Gap="1rem">

				<NameSetting />
				<HotkeysSetting />

			</RadzenStack>
		</RadzenFieldset>

		<RadzenFieldset Text="Process">
			<RadzenStack Gap="1rem">

				@* Refer to examples page. *@
				<RadzenAlert AllowClose="false" AlertStyle="AlertStyle.Secondary">
					See the <RadzenLink Path="/windows" Text="Windows" /> page for open windows, to get suggestions on
					what values to use for <Emph>filename</Emph> and/or <Emph>process name</Emph>.
				</RadzenAlert>

				<FilenameSetting />
				<WinTermAlert />
				<ProcessNameSetting />
				<ArgumentsSetting />
				<AttachModeSetting />
				<WindowTitleSetting />

			</RadzenStack>
		</RadzenFieldset>

		<RadzenFieldset Text="Behavior">
			<RadzenStack Gap="1rem">

				<AlwaysOnTopSetting/>
				<HideOnFocusLostSetting/>
				<TaskbarIconVisibilitySetting/>
				<OpacitySetting/>
				<WindowTitleOverrideSetting/>

			</RadzenStack>
		</RadzenFieldset>

		<RadzenFieldset Text="Position">
			<RadzenStack Gap="1rem">

				<HorizontalScreenCoverageSetting />
				<HorizontalAlignSetting />
				<VerticalScreenCoverageSetting />
				<VerticalOffsetSetting />

			</RadzenStack>
		</RadzenFieldset>

		<RadzenFieldset Text="Monitor">
			<RadzenStack Gap="1rem">

				<PreferMonitorSetting/>
				<MonitorIndexSetting/>

			</RadzenStack>
		</RadzenFieldset>

		<RadzenFieldset Text="Animation">
			<RadzenStack Gap="1rem">

				<AnimationDurationSetting/>
				<AnimationTargetFpsSetting/>
				<AnimationTypeToggleOnSetting/>
				<AnimationTypeToggleOffSetting/>

			</RadzenStack>
		</RadzenFieldset>

	</RadzenStack>

	@* Save/Discard *@
	<RadzenStack
		Orientation="Orientation.Horizontal"
		JustifyContent="JustifyContent.End"
		style="position: sticky; right: 0; bottom: -1.2em; left: 0; padding: 1em 0 1em 0; margin-top: 2em; background-color: #19191a;"
	>
		<RadzenButton Text="Save" Icon="save" Click="SaveAsync"/>
		<RadzenButton Text="Discard Changes" Icon="undo" ButtonStyle="ButtonStyle.Danger" Click="Reload"/>
	</RadzenStack>

</CascadingValue>
</CascadingValue>
</CascadingValue>