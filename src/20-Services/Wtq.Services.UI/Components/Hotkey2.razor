@using System.Text
@using Wtq.Services.UI.Extensions
@code {

	private KeyModifiers _testKeyModifiers;
	private Keys _testKey;

	private bool _isAlt;
	private bool _isCtrl;

	[EditorRequired]
	[Parameter]
	public HotkeyOptions Options { get; set; } = new();

	[EditorRequired]
	[Parameter]
	public Action OnRemove { get; set; }

	private string _val;

	private bool _isSuper;



	private bool IsSuper(KeyboardEventArgs e)
	{
		return (e.Key ?? string.Empty).Equals("super", StringComparison.OrdinalIgnoreCase);
	}

	private string Description
	{
		get
		{
			if (Options.Key != Keys.None || Options.Modifiers != KeyModifiers.None)
			{
				return Options.ToString();
			}

			return "(press a shortcut here)";
		}
	}

	private void Clear()
	{
		Options.Modifiers = KeyModifiers.None;
		Options.Key = Keys.None;
	}

	private void HandleKeyDown(KeyboardEventArgs e)
	{
		if (IsSuper(e))
		{
			_isSuper = true;
		}

		Console.WriteLine($"DOWN - SUPER:{_isSuper} Code:{e.Code} IsComposing:{e.IsComposing} Key:{e.Key} Meta:{e.MetaKey}");

		e.ToModifiersAndKey(out var mod, out var key);

		if (_isSuper)
		{
			mod |= KeyModifiers.Super;
		}

		_testKeyModifiers = mod;
		_testKey = key;

		Options.Modifiers = mod;
		Options.Key = key;

		_val = $"{_testKeyModifiers} {key.GetDisplayDescription()}";
		_val = Options.ToString();
	}

	private void HandleKeyUp(KeyboardEventArgs e)
	{
		Console.WriteLine($"UP - Code:{e.Code} IsComposing:{e.IsComposing} Key:{e.Key} Meta:{e.MetaKey}");

		if (IsSuper(e))
		{
			_isSuper = false;
		}

	}

}

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="8">

	@* <!-- Alt -->
	<RadzenToggleButton
		Text="Alt"
		@bind-Value="Options.IsAlt"
		Size="ButtonSize.Medium"
		ButtonStyle="ButtonStyle.Light"
		ToggleButtonStyle="ButtonStyle.Primary"
		Style="width: 8em;"
	/>

	<!-- Ctrl -->
	<RadzenToggleButton
		Text="Ctrl"
		@bind-Value="Options.IsCtrl"
		Size="ButtonSize.Medium"
		ButtonStyle="ButtonStyle.Light"
		ToggleButtonStyle="ButtonStyle.Primary"
		Style="width: 8em;"
	/>

	<!-- Shift -->
	<RadzenToggleButton
		Text="Shift"
		@bind-Value="Options.IsShift"
		Size="ButtonSize.Medium"
		ButtonStyle="ButtonStyle.Light"
		ToggleButtonStyle="ButtonStyle.Primary"
		Style="width: 8em;"
	/>

	<!-- Super -->
	<RadzenToggleButton
		Text="Super"
		@bind-Value="Options.IsSuper"
		Size="ButtonSize.Medium"
		ButtonStyle="ButtonStyle.Light"
		ToggleButtonStyle="ButtonStyle.Primary"
		Style="width: 8em;"
	/> *@

	<!-- Key -->
	@* <RadzenDropDown
		@bind-Value="Options.Key"
		Data="@(WtqConstants.CommonKeys)"
		Style="width: 100%; max-width: 400px;"
		Name="AnimationTypeToggleOn1"
	/> *@

	<RadzenTextBox
		Style="width: 100%;"
		@onkeydown="(ev) => HandleKeyDown(ev)"
		@onkeyup="(ev) => HandleKeyUp(ev)"
		Placeholder="Type here to set hotkey."
		Value="@Description"
	/>

	<!-- Remove button -->
	<RadzenButton
		Icon="backspace"
		Size="ButtonSize.Medium"
		Click="@(() => Clear())"
	/>

	<!-- Remove button -->
	<RadzenButton
		Icon="delete"
		Size="ButtonSize.Medium"
		Click="@(() => OnRemove())"
	/>
</RadzenStack>