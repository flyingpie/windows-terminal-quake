@using System.ComponentModel.DataAnnotations
@using System.Linq.Expressions

@typeparam TProperty where TProperty : struct

@code {

	[EditorRequired]
	[Parameter]
	public Expression<Func<object?>> Property { get; set; }

	[Parameter]
	public Func<object> Default { get; set; }

	// [Parameter]
	// public TProperty? ActualValue { get; set; }


	[Parameter]
	public Func<TProperty?> Get { get; set; }

	[Parameter]
	public Action<TProperty?> Set { get; set; }

	// [Parameter]
	protected TProperty EffectiveValue
	{
		get
		{
			return Get() ?? (TProperty)Default();

			// return default;
			// try
			// {
			// 	return (TProperty)Property.Compile()();
			// }
			// catch
			// {
			// 	return default;
			// }
		}
		set
		{
			// Property.Compile().Method.Invoke()
			// ActualValue = value;
			Set(value);
		}
	}


	// [CascadingParameter]
	// public IEnumerable<ValidationResult> ValidationResults { get; }

}