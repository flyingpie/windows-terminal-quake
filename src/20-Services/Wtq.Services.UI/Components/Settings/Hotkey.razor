@using Wtq.Services.UI.Extensions

@inject IWtqBus Bus

@code {

	private bool _isSuper;

	[EditorRequired]
	[Parameter]
	public HotkeyOptions Options { get; set; } = new();

	[EditorRequired]
	[Parameter]
	public Action OnRemove { get; set; }

	private string Description
	{
		get
		{
			var s = Options.Sequence;
			return s.IsEmpty
				? "(press a shortcut here)"
				: s.ToShortString();
		}
	}

	private void Clear()
	{
		Options.Modifiers = KeyModifiers.None;
		Options.Key = KeyCode.None;
		Options.KeyChar = null;
	}

	private void HandleFocusGained(FocusEventArgs e) => Bus.Publish<WtqSuspendHotkeysEvent>();

	private void HandleFocusLost(FocusEventArgs e) => Bus.Publish<WtqResumeHotkeysEvent>();

	private void HandleKeyDown(KeyboardEventArgs e)
	{
		e.ToModifiersAndKey(out var mod, out var keyChar, out var keyCode);

		// For some reason, the KeyboardEventArgs.MetaKey bool isn't set to "TRUE" when the meta/super/windows key is pressed.
		// So we're keeping track of that ourselves.
		if (keyCode.IsSuper())
		{
			_isSuper = true;
		}

		if (_isSuper)
		{
			mod |= KeyModifiers.Super;
		}

		// If the pressed key is a modifier, omit it from the "Modifiers" set.
		mod ^= keyCode.AsModifier();

		Options.Modifiers = mod;

		if (keyChar == null || keyChar.Equals("dead", StringComparison.OrdinalIgnoreCase))
		{
			Options.KeyChar = null;
			Options.Key = keyCode;
		}
		else
		{
			Options.Key = KeyCode.None; // To reset existing none-empty values from the settings.
			Options.KeyChar = keyChar;
		}
	}

	private void HandleKeyUp(KeyboardEventArgs e)
	{
		e.ToModifiersAndKey(out var mod, out _, out var keyCode);

		// For some reason, the KeyboardEventArgs.MetaKey bool isn't set to "TRUE" when the meta/super/windows key is pressed.
		// So we're keeping track of that ourselves.
		if (keyCode.IsSuper())
		{
			_isSuper = false;
		}
	}

}

<RadzenStack Orientation="Orientation.Vertical" Gap="0">
	<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="8">

		<!-- Shortcut capturing textbox -->
		<!-- We're preventing default actions so we can intercept more stuff that's already bound to something (like "F5" without refreshing the page). -->
		<input
			class="rz-textbox"
			Style="width: 100%;"
			@onkeydown="HandleKeyDown"
			@onkeydown:preventDefault="true"
			@onkeyup="HandleKeyUp"
			@onfocus="HandleFocusGained"
			@onblur="HandleFocusLost"
			Placeholder="Type here to set hotkey."
			Value="@Description"
		/>

		<!-- Clear button -->
		<RadzenButton
			Icon="backspace"
			Size="ButtonSize.Medium"
			Click="@(() => Clear())"
		/>

		<!-- Remove button -->
		<RadzenButton
			Icon="delete"
			Size="ButtonSize.Medium"
			Click="@(() => OnRemove())"
		/>

	</RadzenStack>

	<RadzenAlert
		AllowClose="false"
		AlertStyle="AlertStyle.Secondary"
		class="rz-mb-0"
		Visible="@(Options.Modifiers.HasShift())"
	>

		The filename suggests you're setting up <Emph>Windows Terminal</Emph>. Note that you need to set <Emph>Process name</Emph> to <Emph></Emph>.

		<RadzenButton
			Variant="Variant.Text"
			Click="@(() => {})"
			Text="Click here"
			Size="ButtonSize.Small"
			ButtonStyle="ButtonStyle.Info"
		/> to do this now.
	</RadzenAlert>
</RadzenStack>
