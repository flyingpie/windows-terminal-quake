@using Wtq.Services.UI.Extensions

@inject IWtqBus Bus

@code {

	private RadzenTextBox _textBox = null!;

	private bool _isSuper;

	[EditorRequired]
	[Parameter]
	public HotkeyOptions Options { get; set; } = new();

	[EditorRequired]
	[Parameter]
	public Action OnRemove { get; set; }

	public ValueTask FocusAsync() => _textBox.FocusAsync();

	private string Description
	{
		get
		{
			if (Options.Key != Keys.None || Options.Modifiers != KeyModifiers.None)
			{
				return Options.ToString();
			}

			return "(press a shortcut here)";
		}
	}

	private void Clear()
	{
		Options.Modifiers = KeyModifiers.None;
		Options.Key = Keys.None;
	}

	private void HandleFocusGained(FocusEventArgs e) => Bus.Publish<WtqSuspendHotkeysEvent>();

	private void HandleFocusLost(FocusEventArgs e) => Bus.Publish<WtqResumeHotkeysEvent>();

	private void HandleKeyDown(KeyboardEventArgs e)
	{
		if (e.IsSuperKey())
		{
			_isSuper = true;
		}

		e.ToModifiersAndKey(out var mod, out var key);

		if (_isSuper)
		{
			mod |= KeyModifiers.Super;
		}

		Options.Modifiers = mod;
		Options.Key = key;
	}

	private void HandleKeyUp(KeyboardEventArgs e)
	{
		if (e.IsSuperKey())
		{
			_isSuper = false;
		}
	}

}

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="8">

	<!-- Shortcut capturing textbox -->
	<RadzenTextBox
		@ref="_textBox"
		Style="width: 100%;"
		@onkeydown="HandleKeyDown"
		@onkeyup="HandleKeyUp"
		@onfocus="HandleFocusGained"
		@onblur="HandleFocusLost"
		Placeholder="Type here to set hotkey."
		Value="@Description"
	/>

	<!-- Clear button -->
	<RadzenButton
		Icon="backspace"
		Size="ButtonSize.Medium"
		Click="@(() => Clear())"
	/>

	<!-- Remove button -->
	<RadzenButton
		Icon="delete"
		Size="ButtonSize.Medium"
		Click="@(() => OnRemove())"
	/>

</RadzenStack>