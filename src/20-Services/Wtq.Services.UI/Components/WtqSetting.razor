@using System.ComponentModel.DataAnnotations
@using System.Linq.Expressions

@typeparam TProperty

@inject TooltipService TooltipService

@code {


	// [Parameter]
	public string? Title => SystemExtensions.GetDisplayName(Get);

	[Parameter]
	public string? Subtitle { get; set; }

	[Parameter]
	public RenderFragment Content { get; set; }

	private string LabelClass
		=> ValidationResultsForProperty.Any()
			? "rz-color-danger-light"
			: "";

	[CascadingParameter]
	public IEnumerable<ValidationResult> ValidationResults { get; set; }

	[Parameter]
	public Expression<Func<object?>> Get { get; set; }

	[Parameter]
	public Action<TProperty?> Set { get; set; }

	[Parameter]
	public Func<object?>? Default { get; set; }

	public bool IsOverridden => Get.Compile()() != null;

	private string? _propertyName;

	private string PropertyName => _propertyName ??= SystemExtensions.GetMemberInfo(Get).Name;

	private IEnumerable<ValidationResult> ValidationResultsForProperty => ValidationResults.Where(v => v.MemberNames.Any(m => m.Equals(PropertyName)));

	public void Reset() => Set(default);

	void ShowTooltip(ElementReference elementReference, TooltipOptions options)
		=> TooltipService.Open(
			elementReference,
			IsOverridden ? "Revert to global setting" : "Uses global setting",
			options);

}

<RadzenRow AlignItems="AlignItems.Start">

	<!-- Label -->
	<RadzenColumn Size="4">
		<RadzenStack Orientation="Orientation.Vertical" Gap="2">
			<RadzenLabel Text="@Title" Component="" class="@LabelClass"/>

			@if (Subtitle != null)
			{
				<p class="rz-color-base-500 rz-m-0">@Subtitle</p>
			}
		</RadzenStack>
	</RadzenColumn>

	<RadzenColumn Size="7">

		<!-- Control -->
		@Content

		<!-- Description -->
		<p>@((MarkupString)SystemExtensions.GetMemberDoc(Get))</p>

		<!-- Validation -->
		@foreach (var v in ValidationResultsForProperty)
		{
			<RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Lighter">@((MarkupString)v.ErrorMessage)</RadzenAlert>
		}

	</RadzenColumn>

	<!-- Override -->
	<RadzenColumn Size="1" class="rz-text-end" style="text-align: right;">

		<RadzenToggleButton
			ButtonStyle="ButtonStyle.Light"
			Click="Reset"
			Disabled="@(!IsOverridden)"
			Icon="public"
			MouseEnter="@(args => ShowTooltip(args, new TooltipOptions() { Position = TooltipPosition.Left, }))"
			Size="ButtonSize.Small"
			ToggleButtonStyle="ButtonStyle.Primary"
			Value="IsOverridden"
			Visible="@(Default != null)"
		/>

	</RadzenColumn>
</RadzenRow>
