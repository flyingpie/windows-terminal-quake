{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Welcome to the Windows Terminal Quake (WTQ) docs! See Installation to get started. WTQ v2 This is the documentation for the in-development WTQ v2. Click here to go to the WTQ v1 docs, which only supports a single application (by default Microsoft's Windows Terminal).","title":"Overview"},{"location":"#overview","text":"Welcome to the Windows Terminal Quake (WTQ) docs! See Installation to get started. WTQ v2 This is the documentation for the in-development WTQ v2. Click here to go to the WTQ v1 docs, which only supports a single application (by default Microsoft's Windows Terminal).","title":"Overview"},{"location":"misc/changelog/","text":"Changelog See the changelog at GitHub releases .","title":"Changelog"},{"location":"misc/changelog/#changelog","text":"See the changelog at GitHub releases .","title":"Changelog"},{"location":"misc/reporting-issues/","text":"Issues Should you encounter a bug, or would like to see an additional feature, please feel free to create an issue on GitHub .","title":"Reporting Issues"},{"location":"misc/reporting-issues/#issues","text":"Should you encounter a bug, or would like to see an additional feature, please feel free to create an issue on GitHub .","title":"Issues"},{"location":"v1/","text":"Overview Companion program for the new Windows Terminal that enables Quake-style drop down and some additional features. WTQ v1 This is the documentation for Windows Terminal Quake v1. It is currently more feature-complete than v2, but as of yet only supports a single application at a time. Click here to see the docs for the in-development v2. Features Runs alongside the new Windows Terminal Toggle using CTRL+~ or CTRL+Q (configurable, see hotkeys ) Shows up on the screen where the mouse is (eg. multi-monitor and multi-workspace) Transparency Configurable as fullscreen, or partial screen Settings Since v0.4, the app supports a JSON settings file. The file can be placed at either (in order): File called \"windows-terminal-quake.json\", next to the app .exe \"C:\\Users\\(username)\\windows-terminal-quake.json\" WTQ also supports the extensions .jsonc and .json5 , which can be useful for automatic syntax highlighting support in editors. Changing the file automatically results in the app reloading the settings. Settings feature Suggested by Mike F .","title":"Overview"},{"location":"v1/#overview","text":"Companion program for the new Windows Terminal that enables Quake-style drop down and some additional features. WTQ v1 This is the documentation for Windows Terminal Quake v1. It is currently more feature-complete than v2, but as of yet only supports a single application at a time. Click here to see the docs for the in-development v2.","title":"Overview"},{"location":"v1/#features","text":"Runs alongside the new Windows Terminal Toggle using CTRL+~ or CTRL+Q (configurable, see hotkeys ) Shows up on the screen where the mouse is (eg. multi-monitor and multi-workspace) Transparency Configurable as fullscreen, or partial screen","title":"Features"},{"location":"v1/#settings","text":"Since v0.4, the app supports a JSON settings file. The file can be placed at either (in order): File called \"windows-terminal-quake.json\", next to the app .exe \"C:\\Users\\(username)\\windows-terminal-quake.json\" WTQ also supports the extensions .jsonc and .json5 , which can be useful for automatic syntax highlighting support in editors. Changing the file automatically results in the app reloading the settings. Settings feature Suggested by Mike F .","title":"Settings"},{"location":"v1/getting-started/build-cake/","text":"Build (Cake) Clone the repository. git clone https://github.com/flyingpie/windows-terminal-quake.git Run build.ps1. cd windows-terminal-quake ./build.ps1 Open one of the executables in artifacts . cd .\\artifacts\\Artifact.SingleExe .\\windows-terminal-quake.exe","title":"Build (Cake)"},{"location":"v1/getting-started/build-cake/#build-cake","text":"Clone the repository. git clone https://github.com/flyingpie/windows-terminal-quake.git Run build.ps1. cd windows-terminal-quake ./build.ps1 Open one of the executables in artifacts . cd .\\artifacts\\Artifact.SingleExe .\\windows-terminal-quake.exe","title":"Build (Cake)"},{"location":"v1/getting-started/build-vs/","text":"Build (Visual Studio) Clone the repository. git clone https://github.com/flyingpie/windows-terminal-quake.git Open windows-terminal-quake.sln. Run build.","title":"Build (Visual Studio)"},{"location":"v1/getting-started/build-vs/#build-visual-studio","text":"Clone the repository. git clone https://github.com/flyingpie/windows-terminal-quake.git Open windows-terminal-quake.sln. Run build.","title":"Build (Visual Studio)"},{"location":"v1/getting-started/direct-download/","text":"Download Binary Get the latest compiled binary from GitHub releases . See all available binaries, also from GitHub releases .","title":"Direct Download"},{"location":"v1/getting-started/direct-download/#download-binary","text":"Get the latest compiled binary from GitHub releases . See all available binaries, also from GitHub releases .","title":"Download Binary"},{"location":"v1/getting-started/get-from-scoop/","text":"Get From Scoop Download from scoop : scoop install https://raw.githubusercontent.com/flyingpie/windows-terminal-quake/master/scoop/windows-terminal-quake.json","title":"Get From Scoop"},{"location":"v1/getting-started/get-from-scoop/#get-from-scoop","text":"Download from scoop : scoop install https://raw.githubusercontent.com/flyingpie/windows-terminal-quake/master/scoop/windows-terminal-quake.json","title":"Get From Scoop"},{"location":"v1/getting-started/get-from-winget/","text":"Get From WinGet Install WinGet : winget install windows-terminal-quake","title":"Get From WinGet"},{"location":"v1/getting-started/get-from-winget/#get-from-winget","text":"Install WinGet : winget install windows-terminal-quake","title":"Get From WinGet"},{"location":"v1/settings/always-on-top/","text":"Always On Top Whether to keep the terminal window always on top (requires restart). Defaults to false . { \"AlwaysOnTop\": true } Suggested by Adam","title":"Always On Top"},{"location":"v1/settings/always-on-top/#always-on-top","text":"Whether to keep the terminal window always on top (requires restart). Defaults to false . { \"AlwaysOnTop\": true } Suggested by Adam","title":"Always On Top"},{"location":"v1/settings/command-line-parameters/","text":"Command Line Parameters Windows Terminal supports a set of command line parameters , for example to start with multiple tabs or panes. Any arguments passed to windows-terminal-quake are passed to Windows Terminal, eg: windows-terminal-quake.exe split-pane Suggested by NikhilSaini38 .","title":"Command Line Parameters"},{"location":"v1/settings/command-line-parameters/#command-line-parameters","text":"Windows Terminal supports a set of command line parameters , for example to start with multiple tabs or panes. Any arguments passed to windows-terminal-quake are passed to Windows Terminal, eg: windows-terminal-quake.exe split-pane Suggested by NikhilSaini38 .","title":"Command Line Parameters"},{"location":"v1/settings/disable-when-active-app-is-in-fullscreen/","text":"Disable When Active App Is In Fullscreen Disable toggle hotkeys when the currently focused application is on the primary monitor and is in fullscreen. Useful for eg. when playing a game, to prevent being thrown back to the desktop when touching a hotkey. Defaults to false . { \"DisableWhenActiveAppIsInFullscreen\": false } Suggested and implemented by einwickler","title":"Disable When Active App Is In Fullscreen"},{"location":"v1/settings/disable-when-active-app-is-in-fullscreen/#disable-when-active-app-is-in-fullscreen","text":"Disable toggle hotkeys when the currently focused application is on the primary monitor and is in fullscreen. Useful for eg. when playing a game, to prevent being thrown back to the desktop when touching a hotkey. Defaults to false . { \"DisableWhenActiveAppIsInFullscreen\": false } Suggested and implemented by einwickler","title":"Disable When Active App Is In Fullscreen"},{"location":"v1/settings/hide-on-focus-lost/","text":"Hide On Focus Lost When clicking or alt-tabbing away to another app, the terminal will automatically (and instantly) hide. Defaults to true . { \"HideOnFocusLost\": true } Suggested by Douglas Lara","title":"Hide On Focus Lost"},{"location":"v1/settings/hide-on-focus-lost/#hide-on-focus-lost","text":"When clicking or alt-tabbing away to another app, the terminal will automatically (and instantly) hide. Defaults to true . { \"HideOnFocusLost\": true } Suggested by Douglas Lara","title":"Hide On Focus Lost"},{"location":"v1/settings/hotkeys/","text":"Hotkeys Multiple hot keys are supported, with an optional modifier. { // The keys that can be used to toggle the terminal \"HotKeys\": [ // Tilde, without modifiers { \"Key\": \"OemTilde\" }, // Ctrl + Q { \"Modifiers\": \"Control\", \"Key\": \"Q\" }, // Multiple modifiers { \"Modifiers\": \"Control,Shift\", \"Key\": \"W\" } ] } F12 As a Hotkey When using \"F12\" as a hotkey, it may be necessary to disable the key as a shortcut for the system-wide debugger first. Since F12 is the default for the debugger, it won't respond when used in another app, such as Windows Terminal Quake, or ConEmu. This can be done by changing the registry key at: Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AeDebug\\UserDebuggerHotKey . This key defaults to 0 , which means F12 . As pointed out by the ConEmu docs, it can for example be changed to the \"Pause\"-key (value 13 ). A reboot may also be required, after which F12 can be used as a hotkey for toggling. Thanks to Luca for pointing this out on GitHub. See also: MSDN docs . ConEmu explanation","title":"Hotkeys"},{"location":"v1/settings/hotkeys/#hotkeys","text":"Multiple hot keys are supported, with an optional modifier. { // The keys that can be used to toggle the terminal \"HotKeys\": [ // Tilde, without modifiers { \"Key\": \"OemTilde\" }, // Ctrl + Q { \"Modifiers\": \"Control\", \"Key\": \"Q\" }, // Multiple modifiers { \"Modifiers\": \"Control,Shift\", \"Key\": \"W\" } ] }","title":"Hotkeys"},{"location":"v1/settings/hotkeys/#f12-as-a-hotkey","text":"When using \"F12\" as a hotkey, it may be necessary to disable the key as a shortcut for the system-wide debugger first. Since F12 is the default for the debugger, it won't respond when used in another app, such as Windows Terminal Quake, or ConEmu. This can be done by changing the registry key at: Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AeDebug\\UserDebuggerHotKey . This key defaults to 0 , which means F12 . As pointed out by the ConEmu docs, it can for example be changed to the \"Pause\"-key (value 13 ). A reboot may also be required, after which F12 can be used as a hotkey for toggling. Thanks to Luca for pointing this out on GitHub. See also: MSDN docs . ConEmu explanation","title":"F12 As a Hotkey"},{"location":"v1/settings/notifications/","text":"Notifications Whether to show notifications when the app starts and when the settings are reloaded. Defaults to true . { \"Notifications\": true }","title":"Notifications"},{"location":"v1/settings/notifications/#notifications","text":"Whether to show notifications when the app starts and when the settings are reloaded. Defaults to true . { \"Notifications\": true }","title":"Notifications"},{"location":"v1/settings/opacity/","text":"Opacity The terminal window can be made transparent through the Opacity -setting. Note that this controls the transparency of the entire window, including the title bar. From 0 (invisible) to 100 (opaque). { \"Opacity\": 80 } Suggested by ukWaqas","title":"Opacity"},{"location":"v1/settings/opacity/#opacity","text":"The terminal window can be made transparent through the Opacity -setting. Note that this controls the transparency of the entire window, including the title bar. From 0 (invisible) to 100 (opaque). { \"Opacity\": 80 } Suggested by ukWaqas","title":"Opacity"},{"location":"v1/settings/prefer-monitor/","text":"Prefer Monitor What monitor to preferrably drop the terminal. Can be: WithCursor Primary AtIndex If PreferMonitor is set to AtIndex , the MonitorIndex -setting determines what monitor to choose. Zero based, eg. 0, 1, etc. Defaults to WithCursor . { \"PreferMonitor\": \"AtIndex\", \"MonitorIndex\": 1 } Suggested by Christian K\u00e4ser","title":"Prefer Monitor"},{"location":"v1/settings/prefer-monitor/#prefer-monitor","text":"What monitor to preferrably drop the terminal. Can be: WithCursor Primary AtIndex If PreferMonitor is set to AtIndex , the MonitorIndex -setting determines what monitor to choose. Zero based, eg. 0, 1, etc. Defaults to WithCursor . { \"PreferMonitor\": \"AtIndex\", \"MonitorIndex\": 1 } Suggested by Christian K\u00e4ser","title":"Prefer Monitor"},{"location":"v1/settings/size-and-align/","text":"Size & Align Horizontal Align When HorizontalScreenCoverage is below 100, this setting determines where the terminal is place horizontally. Possible values: Left Center (default) Right { \"HorizontalAlign\": \"Center\" } Left Center Right Suggested by Rafael Pereira Horizontal Screen Coverage How much horizontal space the terminal should use. When this is below 100, the terminal is centered (can be changed using the Horizontal Align ) setting. This can also be above 100, which can be useful to compensate for the window not always taking a 100% of the screen width, due to the terminal being bound to column widths (eg. try 100.5 or 101). { \"HorizontalScreenCoverage\": 80 } Suggested by baslas Vertical Offset How much room to leave between the top of the terminal and the top of the screen. { // How much room to leave between the top of the terminal and the top of the screen \"VerticalOffset\": 50 } Vertical Screen Coverage The vertical space that is taken up by the terminal window can be configured through \"VerticalScreenCoverage\". { // How far the terminal should come down, in percentage (eg. 50 = half way, 100 = full screen) \"VerticalScreenCoverage\": 60 } Suggested by ukWaqas Suggested by Neil Santos Maximize After Toggle Whether to maximize the terminal after it has toggled into view. Note that this only applies when both HorizontalScreenCoverage and VerticalScreenCoverage are at least 100. This is to fix the issue where the terminal columns don't line up with the width and height of the screen. Since the terminal sizes in incremental values of 1 column, 100% horizontal coverage can actually mean slightly under the full width of the screen. Defaults to true . { \"MaximizeAfterToggle\": true }","title":"Size and Align"},{"location":"v1/settings/size-and-align/#size-align","text":"","title":"Size &amp; Align"},{"location":"v1/settings/size-and-align/#horizontal-align","text":"When HorizontalScreenCoverage is below 100, this setting determines where the terminal is place horizontally. Possible values: Left Center (default) Right { \"HorizontalAlign\": \"Center\" } Left Center Right Suggested by Rafael Pereira","title":"Horizontal Align"},{"location":"v1/settings/size-and-align/#horizontal-screen-coverage","text":"How much horizontal space the terminal should use. When this is below 100, the terminal is centered (can be changed using the Horizontal Align ) setting. This can also be above 100, which can be useful to compensate for the window not always taking a 100% of the screen width, due to the terminal being bound to column widths (eg. try 100.5 or 101). { \"HorizontalScreenCoverage\": 80 } Suggested by baslas","title":"Horizontal Screen Coverage"},{"location":"v1/settings/size-and-align/#vertical-offset","text":"How much room to leave between the top of the terminal and the top of the screen. { // How much room to leave between the top of the terminal and the top of the screen \"VerticalOffset\": 50 }","title":"Vertical Offset"},{"location":"v1/settings/size-and-align/#vertical-screen-coverage","text":"The vertical space that is taken up by the terminal window can be configured through \"VerticalScreenCoverage\". { // How far the terminal should come down, in percentage (eg. 50 = half way, 100 = full screen) \"VerticalScreenCoverage\": 60 } Suggested by ukWaqas Suggested by Neil Santos","title":"Vertical Screen Coverage"},{"location":"v1/settings/size-and-align/#maximize-after-toggle","text":"Whether to maximize the terminal after it has toggled into view. Note that this only applies when both HorizontalScreenCoverage and VerticalScreenCoverage are at least 100. This is to fix the issue where the terminal columns don't line up with the width and height of the screen. Since the terminal sizes in incremental values of 1 column, 100% horizontal coverage can actually mean slightly under the full width of the screen. Defaults to true . { \"MaximizeAfterToggle\": true }","title":"Maximize After Toggle"},{"location":"v1/settings/start-hidden/","text":"Start Hidden Whether to hide the terminal window immediately after app start. Defaults to false . { \"StartHidden\": true } Suggested by Christian K\u00e4ser","title":"Start Hidden"},{"location":"v1/settings/start-hidden/#start-hidden","text":"Whether to hide the terminal window immediately after app start. Defaults to false . { \"StartHidden\": true } Suggested by Christian K\u00e4ser","title":"Start Hidden"},{"location":"v1/settings/suppress-hotkey-for-processes/","text":"Suppress Hotkey for Processes The processes that suppress the hotkey bind. Useful for cases where, when a specific program has focus, toggling of the terminal should be suspended. Defaults to no processes. { \"SuppressHotkeyForProcesses\": [ \"code.exe\" ] } Suggested and implemented by Alex","title":"Suppress Hotkey for Processes"},{"location":"v1/settings/suppress-hotkey-for-processes/#suppress-hotkey-for-processes","text":"The processes that suppress the hotkey bind. Useful for cases where, when a specific program has focus, toggling of the terminal should be suspended. Defaults to no processes. { \"SuppressHotkeyForProcesses\": [ \"code.exe\" ] } Suggested and implemented by Alex","title":"Suppress Hotkey for Processes"},{"location":"v1/settings/taskbar-icon-visibility/","text":"Taskbar Icon Visibility When to show the terminal window icon on the taskbar. \"AlwaysHidden\", \"AlwaysVisible\" or \"WhenTerminalVisible\". Defaults to no \"AlwaysHidden\". { \"TaskbarIconVisibility\": \"AlwaysHidden\" } Suggested by metya","title":"Taskbar Icon Visibility"},{"location":"v1/settings/taskbar-icon-visibility/#taskbar-icon-visibility","text":"When to show the terminal window icon on the taskbar. \"AlwaysHidden\", \"AlwaysVisible\" or \"WhenTerminalVisible\". Defaults to no \"AlwaysHidden\". { \"TaskbarIconVisibility\": \"AlwaysHidden\" } Suggested by metya","title":"Taskbar Icon Visibility"},{"location":"v1/settings/toggle-animation/","text":"Toggle Animation Toggle Animation Type Which animation type is used during toggle up/down. Supported values: Linear EaseInBack EaseInCubic EaseInOutSine EaseInQuart EaseOutBack EaseOutCubic EaseOutQuart See easings.net for examples of the easings. Defaults to EaseOutQuart . { \"ToggleAnimationType\": \"EaseOutQuart\" } Suggested and implemented by Tim Molderez Toggle Duration How long it should take for the terminal to come down or go back up. This is an estimate, since because of the way the toggling works, some slow downs can happen. Setting this to 0 makes the toggle instant. { \"ToggleDurationMs\": 150 } Suggested by Mike F Toggle Mode How the terminal actually gets toggled on- and off the screen. Supported values: Resize Resizes the terminal window vertically until it is either at full size, or shrunk out of the way. This should work on any setup, but can cause some jumping of the terminal characters, such as the cursor. Move Moves the entire window off-screen to the top, which prevents jumping of the terminal characters, since the size of the terminal is kept constant. This doesn't work too great with vertically-stacked monitor setups, since the terminal might be pushed off to the monitor north of the active one. Defaults to Resize . { \"ToggleMode\": \"Resize\" } Suggested by Mark Johnson and Scott Hanselman Toggle Animation Frame Time How long each frame in the toggle animation takes in milliseconds. The lower this value, the smoother the animation, though values lower than 15 are not supported and will result in a toggle taking more than the configured. Defaults to 25 . { \"ToggleAnimationFrameTimeMs\": 25 } Suggested by Raphael Mobis Tacla","title":"Toggle Animation"},{"location":"v1/settings/toggle-animation/#toggle-animation","text":"","title":"Toggle Animation"},{"location":"v1/settings/toggle-animation/#toggle-animation-type","text":"Which animation type is used during toggle up/down. Supported values: Linear EaseInBack EaseInCubic EaseInOutSine EaseInQuart EaseOutBack EaseOutCubic EaseOutQuart See easings.net for examples of the easings. Defaults to EaseOutQuart . { \"ToggleAnimationType\": \"EaseOutQuart\" } Suggested and implemented by Tim Molderez","title":"Toggle Animation Type"},{"location":"v1/settings/toggle-animation/#toggle-duration","text":"How long it should take for the terminal to come down or go back up. This is an estimate, since because of the way the toggling works, some slow downs can happen. Setting this to 0 makes the toggle instant. { \"ToggleDurationMs\": 150 } Suggested by Mike F","title":"Toggle Duration"},{"location":"v1/settings/toggle-animation/#toggle-mode","text":"How the terminal actually gets toggled on- and off the screen. Supported values: Resize Resizes the terminal window vertically until it is either at full size, or shrunk out of the way. This should work on any setup, but can cause some jumping of the terminal characters, such as the cursor. Move Moves the entire window off-screen to the top, which prevents jumping of the terminal characters, since the size of the terminal is kept constant. This doesn't work too great with vertically-stacked monitor setups, since the terminal might be pushed off to the monitor north of the active one. Defaults to Resize . { \"ToggleMode\": \"Resize\" } Suggested by Mark Johnson and Scott Hanselman","title":"Toggle Mode"},{"location":"v1/settings/toggle-animation/#toggle-animation-frame-time","text":"How long each frame in the toggle animation takes in milliseconds. The lower this value, the smoother the animation, though values lower than 15 are not supported and will result in a toggle taking more than the configured. Defaults to 25 . { \"ToggleAnimationFrameTimeMs\": 25 } Suggested by Raphael Mobis Tacla","title":"Toggle Animation Frame Time"},{"location":"v1/settings/windows-terminal-command/","text":"Windows Terminal Command The command/file path to execute when the app starts and Windows Terminal is not yet running. Useful for when the Windows Terminal is not in the PATH variable. In such cases, the full path to the wt.exe executable can be used instead. Defaults to \"wt.exe\". { \"WindowsTerminalCommand\": \"wt.exe\" }","title":"Windows Terminal Command"},{"location":"v1/settings/windows-terminal-command/#windows-terminal-command","text":"The command/file path to execute when the app starts and Windows Terminal is not yet running. Useful for when the Windows Terminal is not in the PATH variable. In such cases, the full path to the wt.exe executable can be used instead. Defaults to \"wt.exe\". { \"WindowsTerminalCommand\": \"wt.exe\" }","title":"Windows Terminal Command"},{"location":"v2/installation/","text":"Getting Started WTQ v2 These parts are still in development, mind the gaps! Get From WinGet TODO Get From Scoop Download from scoop : scoop install https://raw.githubusercontent.com/flyingpie/windows-terminal-quake/master/scoop/windows-terminal-quake.json Direct Download TODO Build (From Command Line) Build (Using Visual Studio)","title":"Installation"},{"location":"v2/installation/#getting-started","text":"WTQ v2 These parts are still in development, mind the gaps!","title":"Getting Started"},{"location":"v2/installation/#get-from-winget","text":"TODO","title":"Get From WinGet"},{"location":"v2/installation/#get-from-scoop","text":"Download from scoop : scoop install https://raw.githubusercontent.com/flyingpie/windows-terminal-quake/master/scoop/windows-terminal-quake.json","title":"Get From Scoop"},{"location":"v2/installation/#direct-download","text":"TODO","title":"Direct Download"},{"location":"v2/installation/#build-from-command-line","text":"","title":"Build (From Command Line)"},{"location":"v2/installation/#build-using-visual-studio","text":"","title":"Build (Using Visual Studio)"},{"location":"v2/settings/apps/","text":"Apps WTQ supports toggling more than 1 program at a time. The programs to toggle, are referred to as \"apps\". Here's (a part of) the default configuration, that's shipped with WTQ: { \"Apps\": [ { \"Name\": \"PowerShell\", \"HotKeys\": [{ \"Modifiers\": \"Control\", \"Key\": \"D1\" }], \"FileName\": \"powershell\" } ] } The default setup uses PowerShell, to prevent requiring a dependency on Windows Terminal. Here's a similar example, for Windows Terminal: { \"Apps\": [ { \"Name\": \"PowerShell\", \"HotKeys\": [{ \"Modifiers\": \"Control\", \"Key\": \"D1\" }], \"FileName\": \"powershell\" } // Example with Windows Terminal //{ // \"Name\": \"Terminal\", // \"HotKeys\": [{ \"Modifiers\": \"Control\", \"Key\": \"D1\" }], // \"FileName\": \"wt\", // \"ProcessName\": \"WindowsTerminal\" //} ], // Hot keys that toggle the most recent app (or the first one if none has been active yet). \"HotKeys\": [ { \"Modifiers\": \"Control\", \"Key\": \"Q\" } ], \"Apps\": [ { \"Name\": \"Terminal\", \"HotKeys\": [ // Ctrl + 1 { \"Modifiers\": \"Control\", \"Key\": \"1\" } ] }, { \"Name\": \"File Browser\", \"HotKeys\": [ // Ctrl + 2 { \"Modifiers\": \"Control\", \"Key\": \"2\" } ] } ] }","title":"Apps"},{"location":"v2/settings/apps/#apps","text":"WTQ supports toggling more than 1 program at a time. The programs to toggle, are referred to as \"apps\". Here's (a part of) the default configuration, that's shipped with WTQ: { \"Apps\": [ { \"Name\": \"PowerShell\", \"HotKeys\": [{ \"Modifiers\": \"Control\", \"Key\": \"D1\" }], \"FileName\": \"powershell\" } ] } The default setup uses PowerShell, to prevent requiring a dependency on Windows Terminal. Here's a similar example, for Windows Terminal: { \"Apps\": [ { \"Name\": \"PowerShell\", \"HotKeys\": [{ \"Modifiers\": \"Control\", \"Key\": \"D1\" }], \"FileName\": \"powershell\" } // Example with Windows Terminal //{ // \"Name\": \"Terminal\", // \"HotKeys\": [{ \"Modifiers\": \"Control\", \"Key\": \"D1\" }], // \"FileName\": \"wt\", // \"ProcessName\": \"WindowsTerminal\" //} ], // Hot keys that toggle the most recent app (or the first one if none has been active yet). \"HotKeys\": [ { \"Modifiers\": \"Control\", \"Key\": \"Q\" } ], \"Apps\": [ { \"Name\": \"Terminal\", \"HotKeys\": [ // Ctrl + 1 { \"Modifiers\": \"Control\", \"Key\": \"1\" } ] }, { \"Name\": \"File Browser\", \"HotKeys\": [ // Ctrl + 2 { \"Modifiers\": \"Control\", \"Key\": \"2\" } ] } ] }","title":"Apps"},{"location":"v2/settings/hotkeys/","text":"Hotkeys Configures the keys used to open and close an app. Hot keys are supported on a global basis, and per app. Multiple hot keys are supported, with an optional modifier. Global { \"HotKeys\": [ // Tilde, without modifiers { \"Key\": \"OemTilde\" }, // Ctrl + Q { \"Modifiers\": \"Control\", \"Key\": \"Q\" }, // Multiple modifiers { \"Modifiers\": \"Control,Shift\", \"Key\": \"W\" } ] } Per App { \"Apps\": [ { \"Name\": \"Terminal\", \"HotKeys\": [ // Ctrl + 1 { \"Modifiers\": \"Control\", \"Key\": \"1\" } ] }, { \"Name\": \"File Browser\", \"HotKeys\": [ // Ctrl + 2 { \"Modifiers\": \"Control\", \"Key\": \"2\" } ] } ] } Windows Key + Tilde as a Hot Key When using the Windows key + tilde as a hot key, while toggling Windows Terminal, the default shortcut for Windows Terminal's own Quake mode may interfere. You can turn off the built-in Quake mode, by unmapping the key: F12 as a Hot Key When using \"F12\" as a hotkey, it may be necessary to disable the key as a shortcut for the system-wide debugger first. Since F12 is the default for the debugger, it won't respond when used in another app, such as Windows Terminal Quake, or ConEmu. This can be done by changing the registry key at: Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AeDebug\\UserDebuggerHotKey . This key defaults to 0 , which means F12 . As pointed out by the ConEmu docs, it can for example be changed to the \"Pause\"-key (value 13 ). A reboot may also be required, after which F12 can be used as a hotkey for toggling. Thanks to Luca for pointing this out on GitHub. See also: MSDN docs . ConEmu explanation","title":"Hotkeys"},{"location":"v2/settings/hotkeys/#hotkeys","text":"Configures the keys used to open and close an app. Hot keys are supported on a global basis, and per app. Multiple hot keys are supported, with an optional modifier.","title":"Hotkeys"},{"location":"v2/settings/hotkeys/#global","text":"{ \"HotKeys\": [ // Tilde, without modifiers { \"Key\": \"OemTilde\" }, // Ctrl + Q { \"Modifiers\": \"Control\", \"Key\": \"Q\" }, // Multiple modifiers { \"Modifiers\": \"Control,Shift\", \"Key\": \"W\" } ] }","title":"Global"},{"location":"v2/settings/hotkeys/#per-app","text":"{ \"Apps\": [ { \"Name\": \"Terminal\", \"HotKeys\": [ // Ctrl + 1 { \"Modifiers\": \"Control\", \"Key\": \"1\" } ] }, { \"Name\": \"File Browser\", \"HotKeys\": [ // Ctrl + 2 { \"Modifiers\": \"Control\", \"Key\": \"2\" } ] } ] }","title":"Per App"},{"location":"v2/settings/hotkeys/#windows-key-tilde-as-a-hot-key","text":"When using the Windows key + tilde as a hot key, while toggling Windows Terminal, the default shortcut for Windows Terminal's own Quake mode may interfere. You can turn off the built-in Quake mode, by unmapping the key:","title":"Windows Key + Tilde as a Hot Key"},{"location":"v2/settings/hotkeys/#f12-as-a-hot-key","text":"When using \"F12\" as a hotkey, it may be necessary to disable the key as a shortcut for the system-wide debugger first. Since F12 is the default for the debugger, it won't respond when used in another app, such as Windows Terminal Quake, or ConEmu. This can be done by changing the registry key at: Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AeDebug\\UserDebuggerHotKey . This key defaults to 0 , which means F12 . As pointed out by the ConEmu docs, it can for example be changed to the \"Pause\"-key (value 13 ). A reboot may also be required, after which F12 can be used as a hotkey for toggling. Thanks to Luca for pointing this out on GitHub. See also: MSDN docs . ConEmu explanation","title":"F12 as a Hot Key"},{"location":"v2/settings/opacity/","text":"Opacity The terminal window can be made transparent through the Opacity -setting. Note that this controls the transparency of the entire window, including the title bar. From 0 (invisible) to 100 (opaque). { \"Opacity\": 80 } Suggested by ukWaqas","title":"Opacity"},{"location":"v2/settings/opacity/#opacity","text":"The terminal window can be made transparent through the Opacity -setting. Note that this controls the transparency of the entire window, including the title bar. From 0 (invisible) to 100 (opaque). { \"Opacity\": 80 } Suggested by ukWaqas","title":"Opacity"},{"location":"v2/settings/prefer-monitor/","text":"Prefer Monitor What monitor to preferrably drop the terminal. Can be: WithCursor Primary AtIndex If PreferMonitor is set to AtIndex , the MonitorIndex -setting determines what monitor to choose. Zero based, eg. 0, 1, etc. Defaults to WithCursor . { \"PreferMonitor\": \"AtIndex\", \"MonitorIndex\": 1 } Suggested by Christian K\u00e4ser","title":"Prefer Monitor"},{"location":"v2/settings/prefer-monitor/#prefer-monitor","text":"What monitor to preferrably drop the terminal. Can be: WithCursor Primary AtIndex If PreferMonitor is set to AtIndex , the MonitorIndex -setting determines what monitor to choose. Zero based, eg. 0, 1, etc. Defaults to WithCursor . { \"PreferMonitor\": \"AtIndex\", \"MonitorIndex\": 1 } Suggested by Christian K\u00e4ser","title":"Prefer Monitor"},{"location":"v2/settings/size-and-align/","text":"Size & Align Horizontal Align When HorizontalScreenCoverage is below 100, this setting determines where the terminal is place horizontally. Possible values: Left Center (default) Right { \"HorizontalAlign\": \"Center\" } Left Center Right Suggested by Rafael Pereira Horizontal Screen Coverage How much horizontal space the terminal should use. When this is below 100, the terminal is centered (can be changed using the Horizontal Align ) setting. This can also be above 100, which can be useful to compensate for the window not always taking a 100% of the screen width, due to the terminal being bound to column widths (eg. try 100.5 or 101). { \"HorizontalScreenCoverage\": 80 } Suggested by baslas Vertical Offset How much room to leave between the top of the terminal and the top of the screen. { // How much room to leave between the top of the terminal and the top of the screen \"VerticalOffset\": 50 } Vertical Screen Coverage The vertical space that is taken up by the terminal window can be configured through \"VerticalScreenCoverage\". { // How far the terminal should come down, in percentage (eg. 50 = half way, 100 = full screen) \"VerticalScreenCoverage\": 60 } Suggested by ukWaqas Suggested by Neil Santos Maximize After Toggle Whether to maximize the terminal after it has toggled into view. Note that this only applies when both HorizontalScreenCoverage and VerticalScreenCoverage are at least 100. This is to fix the issue where the terminal columns don't line up with the width and height of the screen. Since the terminal sizes in incremental values of 1 column, 100% horizontal coverage can actually mean slightly under the full width of the screen. Defaults to true . { \"MaximizeAfterToggle\": true }","title":"Size and Align"},{"location":"v2/settings/size-and-align/#size-align","text":"","title":"Size &amp; Align"},{"location":"v2/settings/size-and-align/#horizontal-align","text":"When HorizontalScreenCoverage is below 100, this setting determines where the terminal is place horizontally. Possible values: Left Center (default) Right { \"HorizontalAlign\": \"Center\" } Left Center Right Suggested by Rafael Pereira","title":"Horizontal Align"},{"location":"v2/settings/size-and-align/#horizontal-screen-coverage","text":"How much horizontal space the terminal should use. When this is below 100, the terminal is centered (can be changed using the Horizontal Align ) setting. This can also be above 100, which can be useful to compensate for the window not always taking a 100% of the screen width, due to the terminal being bound to column widths (eg. try 100.5 or 101). { \"HorizontalScreenCoverage\": 80 } Suggested by baslas","title":"Horizontal Screen Coverage"},{"location":"v2/settings/size-and-align/#vertical-offset","text":"How much room to leave between the top of the terminal and the top of the screen. { // How much room to leave between the top of the terminal and the top of the screen \"VerticalOffset\": 50 }","title":"Vertical Offset"},{"location":"v2/settings/size-and-align/#vertical-screen-coverage","text":"The vertical space that is taken up by the terminal window can be configured through \"VerticalScreenCoverage\". { // How far the terminal should come down, in percentage (eg. 50 = half way, 100 = full screen) \"VerticalScreenCoverage\": 60 } Suggested by ukWaqas Suggested by Neil Santos","title":"Vertical Screen Coverage"},{"location":"v2/settings/size-and-align/#maximize-after-toggle","text":"Whether to maximize the terminal after it has toggled into view. Note that this only applies when both HorizontalScreenCoverage and VerticalScreenCoverage are at least 100. This is to fix the issue where the terminal columns don't line up with the width and height of the screen. Since the terminal sizes in incremental values of 1 column, 100% horizontal coverage can actually mean slightly under the full width of the screen. Defaults to true . { \"MaximizeAfterToggle\": true }","title":"Maximize After Toggle"}]}