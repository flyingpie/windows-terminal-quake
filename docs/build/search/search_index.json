{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Welcome to the Windows Terminal Quake (WTQ) docs!</p> <p>See Installation to get started.</p> <p>WTQ v2</p> <p>This is the documentation for the in-development WTQ v2.</p> <p>Click here to go to the WTQ v1 docs, which only supports a single application (by default Microsoft's Windows Terminal).</p>"},{"location":"misc/faq/","title":"Frequently Asked Questions","text":""},{"location":"misc/faq/#wtq-constantly-spawns-new-command-prompts","title":"WTQ Constantly Spawns New Command Prompts","text":"<p>This probably has to do with Windows Terminal capturing a process such as PowerShell.exe, pwsh.exe, or cmd.exe, and taking over its UI. That makes the original UI unavailable to WTQ, causing it to attempt creating a new instance.</p> <p>Here's what you can do about it:</p>"},{"location":"misc/faq/#have-wtq-control-windows-terminal-directly","title":"Have WTQ control Windows Terminal directly","text":"<p>If you want to toggle Windows Terminal, you can point WTQ to it, instead of the current app, which is probably PowerShell.exe or something alike.</p> <pre><code>{\n    \"Apps\": [\n        {\n            \"Name\":         \"Windows Terminal\",\n            \"Hotkeys\":      [{ \"Modifiers\": \"Control\", \"Key\": \"D1\" }],\n            \"FileName\":     \"wt\",\n            \"ProcessName\":  \"WindowsTerminal\"\n        }\n    ]\n}</code></pre>"},{"location":"misc/faq/#have-windows-terminal-not-attach-to-new-command-prompts","title":"Have Windows Terminal Not Attach To New Command Prompts","text":"<p>If you want to have separate windows for PowerShell.exe, pwsh.exe, cmd.exe, etc., configure Windows Terminal to not attach to them:</p> <p></p> <p>This can also be done from the Windows Settings:</p> <p></p>"},{"location":"misc/faq/#wtq-doesnt-work-properly-with-the-windows-terminal-preview-version","title":"WTQ Doesn't Work Properly With The Windows Terminal Preview Version","text":"<p>This could have to do with the \"wt.exe\" alias not pointing to the correct Windows Terminal version.</p> <p>In Windows Settings, look for \"App execution aliases\", and make sure that \"wt.exe\" is enabled for the desired version of Windows Terminal:</p> <p></p>"},{"location":"misc/reporting-issues/","title":"Issues","text":"<p>Should you encounter a bug, or would like to see an additional feature, please feel free to create an issue on GitHub.</p>"},{"location":"v1/","title":"Overview","text":"<p>Companion program for the new Windows Terminal that enables Quake-style drop down and some additional features.</p> <p></p> <p>WTQ v1</p> <p>This is the documentation for Windows Terminal Quake v1. It is currently more feature-complete than v2, but as of yet only supports a single application at a time.</p> <p>Click here to see the docs for the in-development v2.</p> <p></p>"},{"location":"v1/#features","title":"Features","text":"<ul> <li>Runs alongside the new Windows Terminal</li> <li>Toggle using CTRL+~ or CTRL+Q (configurable, see hotkeys)</li> <li>Shows up on the screen where the mouse is (eg. multi-monitor and multi-workspace)</li> <li>Transparency</li> <li>Configurable as fullscreen, or partial screen</li> </ul>"},{"location":"v1/#settings","title":"Settings","text":"<p>Since v0.4, the app supports a JSON settings file. The file can be placed at either (in order):</p> <ul> <li>File called \"windows-terminal-quake.json\", next to the app .exe</li> <li>\"C:\\Users\\(username)\\windows-terminal-quake.json\"</li> </ul> <p>WTQ also supports the extensions .jsonc and .json5, which can be useful for automatic syntax highlighting support in editors.</p> <p>Changing the file automatically results in the app reloading the settings.</p> <p>Settings feature Suggested by Mike F.</p>"},{"location":"v1/getting-started/build-cake/","title":"Build (Cake)","text":"<ol> <li>Clone the repository.</li> </ol> <pre><code>git clone https://github.com/flyingpie/windows-terminal-quake.git</code></pre> <ol> <li>Run build.ps1.</li> </ol> <pre><code>cd windows-terminal-quake\n\n./build.ps1</code></pre> <ol> <li>Open one of the executables in <code>artifacts</code>.</li> </ol> <pre><code>cd .\\artifacts\\Artifact.SingleExe\n\n.\\windows-terminal-quake.exe</code></pre>"},{"location":"v1/getting-started/build-vs/","title":"Build (Visual Studio)","text":"<ol> <li>Clone the repository.</li> </ol> <pre><code>git clone https://github.com/flyingpie/windows-terminal-quake.git</code></pre> <ol> <li> <p>Open windows-terminal-quake.sln.</p> </li> <li> <p>Run build.</p> </li> </ol>"},{"location":"v1/getting-started/direct-download/","title":"Download Binary","text":"<p>Get the latest compiled binary from GitHub releases.</p> <p>See all available binaries, also from GitHub releases.</p>"},{"location":"v1/getting-started/get-from-scoop/","title":"Get From Scoop","text":"<p>Download from scoop:</p> <pre><code>scoop install https://raw.githubusercontent.com/flyingpie/windows-terminal-quake/master/scoop/windows-terminal-quake.json</code></pre>"},{"location":"v1/getting-started/get-from-winget/","title":"Get From WinGet","text":"<p>Install WinGet:</p> <pre><code>winget install windows-terminal-quake --version 1.6</code></pre>"},{"location":"v1/settings/always-on-top/","title":"Always On Top","text":"<p>Whether to keep the terminal window always on top (requires restart).</p> <p>Defaults to <code>false</code>.</p> <pre><code>{\n    \"AlwaysOnTop\": true\n}</code></pre> <p>Suggested by Adam</p>"},{"location":"v1/settings/command-line-parameters/","title":"Command Line Parameters","text":"<p>Windows Terminal supports a set of command line parameters, for example to start with multiple tabs or panes.</p> <p>Any arguments passed to windows-terminal-quake are passed to Windows Terminal, eg:</p> <pre><code>windows-terminal-quake.exe split-pane</code></pre> <p>Suggested by NikhilSaini38.</p>"},{"location":"v1/settings/disable-when-active-app-is-in-fullscreen/","title":"Disable When Active App Is In Fullscreen","text":"<p>Disable toggle hotkeys when the currently focused application is on the primary monitor and is in fullscreen.</p> <p>Useful for eg. when playing a game, to prevent being thrown back to the desktop when touching a hotkey.</p> <p>Defaults to <code>false</code>.</p> <pre><code>{\n    \"DisableWhenActiveAppIsInFullscreen\": false\n}</code></pre> <p>Suggested and implemented by einwickler</p>"},{"location":"v1/settings/hide-on-focus-lost/","title":"Hide On Focus Lost","text":"<p>When clicking or alt-tabbing away to another app, the terminal will automatically (and instantly) hide.</p> <p>Defaults to <code>true</code>.</p> <pre><code>{\n    \"HideOnFocusLost\": true\n}</code></pre> <p>Suggested by Douglas Lara</p>"},{"location":"v1/settings/hotkeys/","title":"Hotkeys","text":"<p>Multiple hot keys are supported, with an optional modifier.</p> <pre><code>{\n    // The keys that can be used to toggle the terminal\n    \"Hotkeys\": [\n\n        // Tilde, without modifiers\n        {\n            \"Key\": \"OemTilde\"\n        },\n\n        // Ctrl + Q\n        {\n            \"Modifiers\": \"Control\",\n            \"Key\": \"Q\"\n        },\n\n        // Multiple modifiers\n        {\n            \"Modifiers\": \"Control,Shift\",\n            \"Key\": \"W\"\n        }\n    ]\n}</code></pre>"},{"location":"v1/settings/hotkeys/#f12-as-a-hotkey","title":"F12 As a Hotkey","text":"<p>When using \"F12\" as a hotkey, it may be necessary to disable the key as a shortcut for the system-wide debugger first.</p> <p>Since F12 is the default for the debugger, it won't respond when used in another app, such as Windows Terminal Quake, or ConEmu.</p> <p>This can be done by changing the registry key at:</p> <p><code>Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AeDebug\\UserDebuggerHotKey</code>.</p> <p>This key defaults to <code>0</code>, which means <code>F12</code>.</p> <p>As pointed out by the ConEmu docs, it can for example be changed to the \"Pause\"-key (value <code>13</code>).</p> <p>A reboot may also be required, after which F12 can be used as a hotkey for toggling.</p> <p>Thanks to Luca for pointing this out on GitHub.</p> <p>See also:</p> <ul> <li> <p>MSDN docs.</p> </li> <li> <p>ConEmu explanation</p> </li> </ul>"},{"location":"v1/settings/notifications/","title":"Notifications","text":"<p>Whether to show notifications when the app starts and when the settings are reloaded.</p> <p>Defaults to <code>true</code>.</p> <pre><code>{\n    \"Notifications\": true\n}</code></pre>"},{"location":"v1/settings/opacity/","title":"Opacity","text":"<p>The terminal window can be made transparent through the <code>Opacity</code>-setting. Note that this controls the transparency of the entire window, including the title bar.</p> <p>From <code>0</code> (invisible) to <code>100</code> (opaque).</p> <pre><code>{\n    \"Opacity\": 80\n}</code></pre> <p></p> <p>Suggested by ukWaqas</p>"},{"location":"v1/settings/prefer-monitor/","title":"Prefer Monitor","text":"<p>What monitor to preferrably drop the terminal.</p> <p>Can be:</p> <ul> <li>WithCursor</li> <li>Primary</li> <li>AtIndex</li> </ul> <p>If <code>PreferMonitor</code> is set to <code>AtIndex</code>, the <code>MonitorIndex</code>-setting determines what monitor to choose. Zero based, eg. 0, 1, etc.</p> <p>Defaults to <code>WithCursor</code>.</p> <pre><code>{\n    \"PreferMonitor\": \"AtIndex\",\n    \"MonitorIndex\": 1\n}</code></pre> <p>Suggested by Christian K\u00e4ser</p>"},{"location":"v1/settings/size-and-align/","title":"Size &amp; Align","text":""},{"location":"v1/settings/size-and-align/#horizontal-align","title":"Horizontal Align","text":"<p>When <code>HorizontalScreenCoverage</code> is below 100, this setting determines where the terminal is place horizontally.</p> <p>Possible values:</p> <ul> <li>Left</li> <li>Center (default)</li> <li>Right</li> </ul> <pre><code>{\n    \"HorizontalAlign\": \"Center\"\n}</code></pre> <p>Left </p> <p>Center </p> <p>Right </p> <p>Suggested by Rafael Pereira</p>"},{"location":"v1/settings/size-and-align/#horizontal-screen-coverage","title":"Horizontal Screen Coverage","text":"<p>How much horizontal space the terminal should use. When this is below 100, the terminal is centered (can be changed using the Horizontal Align) setting.</p> <p>This can also be above 100, which can be useful to compensate for the window not always taking a 100% of the screen width, due to the terminal being bound to column widths (eg. try 100.5 or 101).</p> <pre><code>{\n    \"HorizontalScreenCoverage\": 80\n}</code></pre> <p></p> <p>Suggested by baslas</p>"},{"location":"v1/settings/size-and-align/#vertical-offset","title":"Vertical Offset","text":"<p>How much room to leave between the top of the terminal and the top of the screen.</p> <pre><code>{\n  // How much room to leave between the top of the terminal and the top of the screen\n  \"VerticalOffset\": 50\n}</code></pre>"},{"location":"v1/settings/size-and-align/#vertical-screen-coverage","title":"Vertical Screen Coverage","text":"<p>The vertical space that is taken up by the terminal window can be configured through \"VerticalScreenCoverage\".</p> <pre><code>{\n  // How far the terminal should come down, in percentage (eg. 50 = half way, 100 = full screen)\n  \"VerticalScreenCoverage\": 60\n}</code></pre> <p></p> <p>Suggested by ukWaqas</p> <p></p> <p>Suggested by Neil Santos</p>"},{"location":"v1/settings/size-and-align/#maximize-after-toggle","title":"Maximize After Toggle","text":"<p>Whether to maximize the terminal after it has toggled into view. Note that this only applies when both <code>HorizontalScreenCoverage</code> and <code>VerticalScreenCoverage</code> are at least 100.</p> <p>This is to fix the issue where the terminal columns don't line up with the width and height of the screen.</p> <p>Since the terminal sizes in incremental values of 1 column, 100% horizontal coverage can actually mean slightly under the full width of the screen.</p> <p>Defaults to <code>true</code>.</p> <pre><code>{\n    \"MaximizeAfterToggle\": true\n}</code></pre>"},{"location":"v1/settings/start-hidden/","title":"Start Hidden","text":"<p>Whether to hide the terminal window immediately after app start.</p> <p>Defaults to <code>false</code>.</p> <pre><code>{\n    \"StartHidden\": true\n}</code></pre> <p>Suggested by Christian K\u00e4ser</p>"},{"location":"v1/settings/suppress-hotkey-for-processes/","title":"Suppress Hotkey for Processes","text":"<p>The processes that suppress the hotkey bind.</p> <p>Useful for cases where, when a specific program has focus, toggling of the terminal should be suspended.</p> <p>Defaults to no processes.</p> <pre><code>{\n    \"SuppressHotkeyForProcesses\": [ \"code.exe\" ]\n}</code></pre> <p>Suggested and implemented by Alex</p>"},{"location":"v1/settings/taskbar-icon-visibility/","title":"Taskbar Icon Visibility","text":"<p>When to show the terminal window icon on the taskbar.</p> <p>\"AlwaysHidden\", \"AlwaysVisible\" or \"WhenTerminalVisible\".</p> <p>Defaults to no \"AlwaysHidden\".</p> <pre><code>{\n    \"TaskbarIconVisibility\": \"AlwaysHidden\"\n}</code></pre> <p>Suggested by metya</p>"},{"location":"v1/settings/toggle-animation/","title":"Toggle Animation","text":""},{"location":"v1/settings/toggle-animation/#toggle-animation-type","title":"Toggle Animation Type","text":"<p>Which animation type is used during toggle up/down.</p> <p>Supported values:</p> <ul> <li>Linear</li> <li>EaseInBack</li> <li>EaseInCubic</li> <li>EaseInOutSine</li> <li>EaseInQuart</li> <li>EaseOutBack</li> <li>EaseOutCubic</li> <li>EaseOutQuart</li> </ul> <p>See easings.net for examples of the easings.</p> <p>Defaults to <code>EaseOutQuart</code>.</p> <pre><code>{\n    \"ToggleAnimationType\": \"EaseOutQuart\"\n}</code></pre> <p>Suggested and implemented by Tim Molderez</p>"},{"location":"v1/settings/toggle-animation/#toggle-duration","title":"Toggle Duration","text":"<p>How long it should take for the terminal to come down or go back up. This is an estimate, since because of the way the toggling works, some slow downs can happen.</p> <p>Setting this to <code>0</code> makes the toggle instant.</p> <pre><code>{\n    \"ToggleDurationMs\": 150\n}</code></pre> <p>Suggested by Mike F</p>"},{"location":"v1/settings/toggle-animation/#toggle-mode","title":"Toggle Mode","text":"<p>How the terminal actually gets toggled on- and off the screen.</p> <p>Supported values:</p> <p>Resize</p> <p>Resizes the terminal window vertically until it is either at full size, or shrunk out of the way. This should work on any setup, but can cause some jumping of the terminal characters, such as the cursor.</p> <p>Move</p> <p>Moves the entire window off-screen to the top, which prevents jumping of the terminal characters, since the size of the terminal is kept constant.</p> <p>This doesn't work too great with vertically-stacked monitor setups, since the terminal might be pushed off to the monitor north of the active one.</p> <p>Defaults to <code>Resize</code>.</p> <pre><code>{\n    \"ToggleMode\": \"Resize\"\n}</code></pre> <p>Suggested by Mark Johnson and Scott Hanselman</p>"},{"location":"v1/settings/toggle-animation/#toggle-animation-frame-time","title":"Toggle Animation Frame Time","text":"<p>How long each frame in the toggle animation takes in milliseconds. The lower this value, the smoother the animation, though values lower than 15 are not supported and will result in a toggle taking more than the configured.</p> <p>Defaults to <code>25</code>.</p> <pre><code>{\n    \"ToggleAnimationFrameTimeMs\": 25\n}</code></pre> <p>Suggested by Raphael Mobis Tacla</p>"},{"location":"v1/settings/windows-terminal-command/","title":"Windows Terminal Command","text":"<p>The command/file path to execute when the app starts and Windows Terminal is not yet running.</p> <p>Useful for when the Windows Terminal is not in the PATH variable. In such cases, the full path to the wt.exe executable can be used instead.</p> <p>Defaults to \"wt.exe\".</p> <pre><code>{\n    \"WindowsTerminalCommand\": \"wt.exe\"\n}</code></pre>"},{"location":"v2/installation/","title":"Getting Started","text":""},{"location":"v2/installation/#direct-download-recommended","title":"Direct Download (Recommended)","text":"<p>Recommended</p> <p>Direct download is currently the recommended way of using WTQ v2, due to it receiving updates the soonest.</p> <ul> <li>Go to the GitHub Releases page for a recent build;</li> <li>Download the desired version:<ul> <li>Self Contained builds are larger, but don't require any dependencies;</li> <li>Framework Dependent builds are smaller, but require the .Net 8 runtime to be installed.</li> </ul> </li> <li>Extract the archive;</li> <li>Launch wtq.exe to start the program;</li> <li>Edit wtq.jsonc, which contains the configuration.</li> </ul>"},{"location":"v2/installation/#get-from-winget","title":"Get From WinGet","text":"<p>Download from WinGet:</p> <pre><code>winget install windows-terminal-quake</code></pre> <p>The manifests can be found here.</p>"},{"location":"v2/installation/#get-from-scoop","title":"Get From Scoop","text":"<p>Download from scoop:</p> <pre><code>scoop install https://raw.githubusercontent.com/flyingpie/windows-terminal-quake/master/scoop/wtq-latest.json</code></pre>"},{"location":"v2/installation/#build-from-command-line","title":"Build (From Command Line)","text":"<p>Requirements</p> <p>Requires .Net 8 SDK, which can be downloaded from https://get.dot.net</p> <p>Clone the repo:</p> <pre><code>git clone https://github.com/flyingpie/windows-terminal-quake.git</code></pre> <p>Go to the \"src\" directory: <pre><code>cd windows-terminal-quake/src</code></pre></p> <p>Run the Nuke build script: <pre><code>./build.ps1</code></pre></p> <p>The build output is under ~/_output/artifacts.</p>"},{"location":"v2/installation/#build-using-visual-studio","title":"Build (Using Visual Studio)","text":"<p>Clone the repo:</p> <pre><code>git clone https://github.com/flyingpie/windows-terminal-quake.git</code></pre> <p>Open the solution file:</p> <pre><code>src/Wtq.sln</code></pre> <p>Build the solution (by default Ctrl + Shift + B).</p> <p>The build output is under ~/_output/build/bin/Wtq.Windows/net8.0-windows.</p>"},{"location":"v2/settings/apps/","title":"Apps","text":"<p>WTQ can toggle 1 or more apps.</p> <p>Here's an example of WTQ toggling a PowerShell prompt:</p> <pre><code>{\n    \"Apps\": [\n        {\n            // A unique name for the app, used for logging.\n            \"Name\":     \"PowerShell\",\n\n            // Hotkeys that toggle this app only.\n            \"Hotkeys\":  [{ \"Modifiers\": \"Control\", \"Key\": \"D1\" }],\n\n            // Used to find an existing instance, or start a new one.\n            \"FileName\": \"powershell\"\n        }\n    ]\n}</code></pre> <p>You can define more than 1 app:</p> <pre><code>{\n    \"Apps\": [\n        {\n            \"Name\":     \"App Name 1\",\n            \"Hotkeys\":  [{ \"Modifiers\": \"Control\", \"Key\": \"D1\" }], // Ctrl + 1\n            ...\n        },\n        {\n            \"Name\":     \"App Name 2\",\n            \"Hotkeys\":  [{ \"Modifiers\": \"Control\", \"Key\": \"D2\" }], // Ctrl + 2\n            ...\n        },\n        {\n            \"Name\":     \"App Name 3\",\n            \"Hotkeys\":  [{ \"Modifiers\": \"Control\", \"Key\": \"D3\" }], // Ctrl + 3\n            ...\n        },\n        ...\n    ]\n}</code></pre> <p>Absolute file paths work too, if the app is not on the PATH:</p> <pre><code>{\n    \"Apps\": [\n        {\n            \"Name\":         \"WezTerm\",\n            \"Hotkeys\":      [{ \"Modifiers\": \"Control\", \"Key\": \"D1\" }],\n            \"FileName\":     \"C:/Program Files/WezTerm/wezterm-gui.exe\"\n        }\n    ]\n}</code></pre> <p>Here are some more app-specific properties:</p> <pre><code>{\n    \"Apps\": [\n        {\n            // For use in logging and error messages.\n            \"Name\":         \"Name Of The App\",\n\n            // A list of hotkeys that toggle this app, and this app only.\n            \"Hotkeys\":      [{ \"Modifiers\": \"Control\", \"Key\": \"D1\" }],\n\n            // The file name of the app to attach to. This is used to both find an existing instance of an already running app, and for starting a new one.\n            \"FileName\":     \"C:/Program Files/WezTerm/wezterm-gui.exe\",\n\n            // Command line arguments can be passed, only used when spawning new app instances.\n            \"Arguments\":    \"--argument1=value1\",\n\n            // For some apps, the initially started process does not equal the ultimately running process name.\n            // Such as for Windows Terminal, which is started using \"wt.exe\", but then runs using \"WindowsTerminal.exe\".\n            // In such cases, the \"FileName\" can't be used to find existing processes.\n            // The \"ProcessName\" property can be used to override the process name that is used when looking for existing processes.\n            // By default, the \"FileName\" property is used for this, and \"ProcessName\" remains null.\n            \"ProcessName\":  null,\n        }\n    ]\n}</code></pre>"},{"location":"v2/settings/apps/#examples","title":"Examples","text":""},{"location":"v2/settings/apps/#windows-terminal","title":"Windows Terminal","text":"<p>Assuming wt.exe to be on the PATH, eg. can be run through Win+R.</p> <pre><code>{\n    \"Apps\": [\n        {\n            \"Name\":         \"Windows Terminal\",\n            \"Hotkeys\":      [{ \"Modifiers\": \"Control\", \"Key\": \"D1\" }],\n            \"FileName\":     \"wt\",\n            \"ProcessName\":  \"WindowsTerminal\"\n        }\n    ]\n}</code></pre> <p>Windows Terminal has a particular behavior where the initial \"wt.exe\" starts another process, called \"WindowsTerminal\". Currently, we can't use the same filter to both start a new instance, and find an existing one, so we need to define both separately.</p> <p>Windows Terminal home page</p>"},{"location":"v2/settings/apps/#wezterm","title":"WezTerm","text":"<pre><code>{\n    \"Apps\": [\n        {\n            \"Name\":         \"WezTerm\",\n            \"Hotkeys\":      [{ \"Modifiers\": \"Control\", \"Key\": \"D1\" }],\n            \"FileName\":     \"wezterm-gui\"\n        }\n    ]\n}</code></pre> <p>WezTerm home page</p>"},{"location":"v2/settings/apps/#alacritty","title":"Alacritty","text":"<pre><code>{\n    \"Apps\": [\n        {\n            \"Name\":         \"Alacritty\",\n            \"Hotkeys\":      [{ \"Modifiers\": \"Control\", \"Key\": \"D1\" }],\n            \"FileName\":     \"alacritty\"\n        }\n    ]\n}</code></pre> <p>Alacritty home page</p>"},{"location":"v2/settings/apps/#double-commander","title":"Double Commander","text":"<pre><code>{\n    \"Apps\": [\n        {\n            \"Name\":         \"Double Commander\",\n            \"Hotkeys\":      [{ \"Modifiers\": \"Control\", \"Key\": \"D1\" }],\n            \"FileName\":     \"doublecmd\"\n        }\n    ]\n}</code></pre> <p>Double Commander home page</p>"},{"location":"v2/settings/hide-on-focus-lost/","title":"Hide On Focus Lost","text":"<p>When clicking or alt-tabbing away to another app, the terminal will automatically (and instantly) hide.</p> <p>Defaults to <code>true</code>.</p>"},{"location":"v2/settings/hide-on-focus-lost/#global","title":"Global","text":"<pre><code>{\n    \"HideOnFocusLost\": false\n}</code></pre>"},{"location":"v2/settings/hide-on-focus-lost/#per-app","title":"Per App","text":"<pre><code>{\n    \"Apps\": [\n        {\n            \"Name\": \"Terminal\",\n            \"HideOnFocusLost\": false\n            ...\n        }\n    ]\n}</code></pre> <p>Suggested by Douglas Lara</p>"},{"location":"v2/settings/hotkeys/","title":"Hotkeys","text":"<p>Configures the keys used to open and close an app.</p> <p>Hotkeys are supported on a global basis, and per app. Multiple hotkeys are supported, with an optional modifier.</p>"},{"location":"v2/settings/hotkeys/#global","title":"Global","text":"<pre><code>{\n    \"Hotkeys\": [\n        // Tilde, without modifiers\n        { \"Key\": \"OemTilde\" },\n\n        // Ctrl + Q\n        { \"Modifiers\": \"Control\", \"Key\": \"Q\" },\n\n        // Multiple modifiers\n        { \"Modifiers\": \"Control,Shift\", \"Key\": \"W\" }\n    ]\n}</code></pre>"},{"location":"v2/settings/hotkeys/#per-app","title":"Per App","text":"<pre><code>{\n    \"Apps\": [\n        {\n            \"Name\": \"Terminal\",\n\n            \"Hotkeys\": [\n                // Ctrl + 1\n                { \"Modifiers\": \"Control\", \"Key\": \"1\" }\n            ]\n        },\n        {\n            \"Name\": \"File Browser\",\n\n            \"Hotkeys\": [\n                // Ctrl + 2\n                { \"Modifiers\": \"Control\", \"Key\": \"2\" }\n            ]\n        }\n    ]\n}</code></pre>"},{"location":"v2/settings/hotkeys/#windows-key-tilde-as-a-hotkey","title":"Windows Key + Tilde as a Hotkey","text":"<p>When using the Windows key + tilde as a hotkey, while toggling Windows Terminal, the default shortcut for Windows Terminal's own Quake mode may interfere.</p> <p>You can turn off the built-in Quake mode, by unmapping the key:</p> <p></p>"},{"location":"v2/settings/hotkeys/#f12-as-a-hotkey","title":"F12 as a Hotkey","text":"<p>When using \"F12\" as a hotkey, it may be necessary to disable the key as a shortcut for the system-wide debugger first.</p> <p>Since F12 is the default for the debugger, it won't respond when used in another app, such as Windows Terminal Quake, or ConEmu.</p> <p>This can be done by changing the registry key at:</p> <pre><code>Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AeDebug\\UserDebuggerHotKey</code></pre> <p>This key defaults to <code>0</code>, which means <code>F12</code>.</p> <p>As pointed out by the ConEmu docs, it can for example be changed to the \"Pause\"-key (value <code>13</code>).</p> <p>A reboot may also be required, after which F12 can be used as a hotkey for toggling.</p> <p>Thanks to Luca for pointing this out on GitHub.</p> <p>See also:</p> <ul> <li> <p>MSDN docs.</p> </li> <li> <p>ConEmu explanation</p> </li> </ul>"},{"location":"v2/settings/hotkeys/#key-modifiers","title":"Key Modifiers","text":"<ul> <li>Alt</li> <li>Control</li> <li>Shift</li> <li>Super</li> </ul>"},{"location":"v2/settings/hotkeys/#keys","title":"Keys","text":"<pre><code>// The bitmask to extract a key code from a key value.\nKeyCode\n\n// The bitmask to extract modifiers from a key value.\nModifiers\n\n// No key pressed.\nNone\n\n// The left mouse button.\nLButton\n\n// The right mouse button.\nRButton\n\n// The CANCEL key.\nCancel\n\n// The middle mouse button (three-button mouse).\nMButton\n\n// The first x mouse button (five-button mouse).\nXButton1\n\n// The second x mouse button (five-button mouse).\nXButton2\n\n// The BACKSPACE key.\nBack\n\n// The TAB key.\nTab\n\n// The LINEFEED key.\nLineFeed\n\n// The CLEAR key.\nClear\n\n// The RETURN key.\nReturn\n\n// The ENTER key.\nEnter\n\n// The SHIFT key.\nShiftKey\n\n// The CTRL key.\nControlKey\n\n// The ALT key.\nMenu\n\n// The PAUSE key.\nPause\n\n// The CAPS LOCK key.\nCapital\n\n// The CAPS LOCK key.\nCapsLock\n\n// The IME Kana mode key.\nKanaMode\n\n// The IME Hanguel mode key. (maintained for compatibility; use HangulMode).\nHanguelMode\n\n// The IME Hangul mode key.\nHangulMode\n\n// The IME Junja mode key.\nJunjaMode\n\n// The IME final mode key.\nFinalMode\n\n// The IME Hanja mode key.\nHanjaMode\n\n// The IME Kanji mode key.\nKanjiMode\n\n// The ESC key.\nEscape\n\n// The IME convert key.\nIMEConvert\n\n// The IME nonconvert key.\nIMENonconvert\n\n// The IME accept key, replaces System.Windows.Forms.Keys.IMEAceept.\nIMEAccept\n\n// The IME accept key. Obsolete, use System.Windows.Forms.Keys.IMEAccept instead.\nIMEAceept\n\n// The IME mode change key.\nIMEModeChange\n\n// The SPACEBAR key.\nSpace\n\n// The PAGE UP key.\nPrior\n\n// The PAGE UP key.\nPageUp\n\n// The PAGE DOWN key.\nNext\n\n// The PAGE DOWN key.\nPageDown\n\n// The END key.\nEnd\n\n// The HOME key.\nHome\n\n// The LEFT ARROW key.\nLeft\n\n// The UP ARROW key.\nUp\n\n// The RIGHT ARROW key.\nRight\n\n// The DOWN ARROW key.\nDown\n\n// The SELECT key.\nSelect\n\n// The PRINT key.\nPrint\n\n// The EXECUTE key.\nExecute\n\n// The PRINT SCREEN key.\nSnapshot\n\n// The PRINT SCREEN key.\nPrintScreen\n\n// The INS key.\nInsert\n\n// The DEL key.\nDelete\n\n// The HELP key.\nHelp\n\n// The 0 key.\nD0\n\n// The 1 key.\nD1\n\n// The 2 key.\nD2\n\n// The 3 key.\nD3\n\n// The 4 key.\nD4\n\n// The 5 key.\nD5\n\n// The 6 key.\nD6\n\n// The 7 key.\nD7\n\n// The 8 key.\nD8\n\n// The 9 key.\nD9\n\n// The A key.\nA\n\n// The B key.\nB\n\n// The C key.\nC\n\n// The D key.\nD\n\n// The E key.\nE\n\n// The F key.\nF\n\n// The G key.\nG\n\n// The H key.\nH\n\n// The I key.\nI\n\n// The J key.\nJ\n\n// The K key.\nK\n\n// The L key.\nL\n\n// The M key.\nM\n\n// The N key.\nN\n\n// The O key.\nO\n\n// The P key.\nP\n\n// The Q key.\nQ\n\n// The R key.\nR\n\n// The S key.\nS\n\n// The T key.\nT\n\n// The U key.\nU\n\n// The V key.\nV\n\n// The W key.\nW\n\n// The X key.\nX\n\n// The Y key.\nY\n\n// The Z key.\nZ\n\n// The left Windows logo key (Microsoft Natural Keyboard).\nLWin\n\n// The right Windows logo key (Microsoft Natural Keyboard).\nRWin\n\n// The application key (Microsoft Natural Keyboard).\nApps\n\n// The computer sleep key.\nSleep\n\n// The 0 key on the numeric keypad.\nNumPad0\n\n// The 1 key on the numeric keypad.\nNumPad1\n\n// The 2 key on the numeric keypad.\nNumPad2\n\n// The 3 key on the numeric keypad.\nNumPad3\n\n// The 4 key on the numeric keypad.\nNumPad4\n\n// The 5 key on the numeric keypad.\nNumPad5\n\n// The 6 key on the numeric keypad.\nNumPad6\n\n// The 7 key on the numeric keypad.\nNumPad7\n\n// The 8 key on the numeric keypad.\nNumPad8\n\n// The 9 key on the numeric keypad.\nNumPad9\n\n// The multiply key.\nMultiply\n\n// The add key.\nAdd\n\n// The separator key.\nSeparator\n\n// The subtract key.\nSubtract\n\n// The decimal key.\nDecimal\n\n// The divide key.\nDivide\n\n// The F1 key.\nF1\n\n// The F2 key.\nF2\n\n// The F3 key.\nF3\n\n// The F4 key.\nF4\n\n// The F5 key.\nF5\n\n// The F6 key.\nF6\n\n// The F7 key.\nF7\n\n// The F8 key.\nF8\n\n// The F9 key.\nF9\n\n// The F10 key.\nF10\n\n// The F11 key.\nF11\n\n// The F12 key.\nF12\n\n// The F13 key.\nF13\n\n// The F14 key.\nF14\n\n// The F15 key.\nF15\n\n// The F16 key.\nF16\n\n// The F17 key.\nF17\n\n// The F18 key.\nF18\n\n// The F19 key.\nF19\n\n// The F20 key.\nF20\n\n// The F21 key.\nF21\n\n// The F22 key.\nF22\n\n// The F23 key.\nF23\n\n// The F24 key.\nF24\n\n// The NUM LOCK key.\nNumLock\n\n// The SCROLL LOCK key.\nScroll\n\n// The left SHIFT key.\nLShiftKey\n\n// The right SHIFT key.\nRShiftKey\n\n// The left CTRL key.\nLControlKey\n\n// The right CTRL key.\nRControlKey\n\n// The left ALT key.\nLMenu\n\n// The right ALT key.\nRMenu\n\n// The browser back key (Windows 2000 or later).\nBrowserBack\n\n// The browser forward key (Windows 2000 or later).\nBrowserForward\n\n// The browser refresh key (Windows 2000 or later).\nBrowserRefresh\n\n// The browser stop key (Windows 2000 or later).\nBrowserStop\n\n// The browser search key (Windows 2000 or later).\nBrowserSearch\n\n// The browser favorites key (Windows 2000 or later).\nBrowserFavorites\n\n// The browser home key (Windows 2000 or later).\nBrowserHome\n\n// The volume mute key (Windows 2000 or later).\nVolumeMute\n\n// The volume down key (Windows 2000 or later).\nVolumeDown\n\n// The volume up key (Windows 2000 or later).\nVolumeUp\n\n// The media next track key (Windows 2000 or later).\nMediaNextTrack\n\n// The media previous track key (Windows 2000 or later).\nMediaPreviousTrack\n\n// The media Stop key (Windows 2000 or later).\nMediaStop\n\n// The media play pause key (Windows 2000 or later).\nMediaPlayPause\n\n// The launch mail key (Windows 2000 or later).\nLaunchMail\n\n// The select media key (Windows 2000 or later).\nSelectMedia\n\n// The start application one key (Windows 2000 or later).\nLaunchApplication1\n\n// The start application two key (Windows 2000 or later).\nLaunchApplication2\n\n// The OEM Semicolon key on a US standard keyboard (Windows 2000 or later).\nOemSemicolon\n\n// The OEM 1 key.\nOem1\n\n// The OEM plus key on any country/region keyboard (Windows 2000 or later).\nOemplus\n\n// The OEM comma key on any country/region keyboard (Windows 2000 or later).\nOemcomma\n\n// The OEM minus key on any country/region keyboard (Windows 2000 or later).\nOemMinus\n\n// The OEM period key on any country/region keyboard (Windows 2000 or later).\nOemPeriod\n\n// The OEM question mark key on a US standard keyboard (Windows 2000 or later).\nOemQuestion\n\n// The OEM 2 key.\nOem2\n\n// The OEM tilde key on a US standard keyboard (Windows 2000 or later).\nOemtilde\n\n// The OEM 3 key.\nOem3\n\n// The OEM open bracket key on a US standard keyboard (Windows 2000 or later).\nOemOpenBrackets\n\n// The OEM 4 key.\nOem4\n\n// The OEM pipe key on a US standard keyboard (Windows 2000 or later).\nOemPipe\n\n// The OEM 5 key.\nOem5\n\n// The OEM close bracket key on a US standard keyboard (Windows 2000 or later).\nOemCloseBrackets\n\n// The OEM 6 key.\nOem6\n\n// The OEM singled/double quote key on a US standard keyboard (Windows 2000 or later).\nOemQuotes\n\n// The OEM 7 key.\nOem7\n\n// The OEM 8 key.\nOem8\n\n// The OEM angle bracket or backslash key on the RT 102 key keyboard (Windows 2000.\n// or later).\nOemBackslash\n\n// The OEM 102 key.\nOem102\n\n// The PROCESS KEY key.\nProcessKey\n\n// Used to pass Unicode characters as if they were keystrokes. The Packet key value.\n// is the low word of a 32-bit virtual-key value used for non-keyboard input methods.\nPacket\n\n// The ATTN key.\nAttn\n\n// The CRSEL key.\nCrsel\n\n// The EXSEL key.\nExsel\n\n// The ERASE EOF key.\nEraseEof\n\n// The PLAY key.\nPlay\n\n// The ZOOM key.\nZoom\n\n// A constant reserved for future use.\nNoName\n\n// The PA1 key.\nPa1\n\n// The CLEAR key.\nOemClear\n\n// The SHIFT modifier key.\nShift\n\n// The CTRL modifier key.\nControl\n\n// The ALT modifier key.\nAlt</code></pre>"},{"location":"v2/settings/opacity/","title":"Opacity","text":"<p>The terminal window can be made transparent through the <code>Opacity</code>-setting. Note that this controls the transparency of the entire window, including the title bar.</p> <p>From <code>0</code> (invisible) to <code>100</code> (opaque).</p>"},{"location":"v2/settings/opacity/#global","title":"Global","text":"<pre><code>{\n    \"Opacity\": 80\n}</code></pre>"},{"location":"v2/settings/opacity/#per-app","title":"Per App","text":"<pre><code>{\n    \"Apps\": [\n        {\n            \"Name\": \"Terminal\",\n            \"Opacity\": 80,\n            ...\n        }\n    ]\n}</code></pre> <p>Suggested by ukWaqas</p>"},{"location":"v2/settings/prefer-monitor/","title":"Prefer Monitor","text":"<p>What monitor to preferrably drop the terminal.</p> <p>Can be:</p> <ul> <li>WithCursor</li> <li>Primary</li> <li>AtIndex</li> </ul> <p>If <code>PreferMonitor</code> is set to <code>AtIndex</code>, the <code>MonitorIndex</code>-setting determines what monitor to choose. Zero based, eg. 0, 1, etc.</p> <p>Defaults to <code>WithCursor</code>.</p> <pre><code>{\n    \"PreferMonitor\": \"AtIndex\",\n    \"MonitorIndex\": 1\n}</code></pre> <p>Suggested by Christian K\u00e4ser</p>"},{"location":"v2/settings/size-and-align/","title":"Size &amp; Align","text":""},{"location":"v2/settings/size-and-align/#horizontal-align","title":"Horizontal Align","text":"<p>When <code>HorizontalScreenCoverage</code> is below 100, this setting determines where the terminal is place horizontally.</p> <p>Possible values:</p> <ul> <li>Left</li> <li>Center (default)</li> <li>Right</li> </ul> <pre><code>{\n    \"HorizontalAlign\": \"Center\"\n}</code></pre> <p>Left </p> <p>Center </p> <p>Right </p> <p>Suggested by Rafael Pereira</p>"},{"location":"v2/settings/size-and-align/#horizontal-screen-coverage","title":"Horizontal Screen Coverage","text":"<p>How much horizontal space the terminal should use. When this is below 100, the terminal is centered (can be changed using the Horizontal Align setting.</p> <p>This can also be above 100, which can be useful to compensate for the window not always taking a 100% of the screen width, due to the terminal being bound to column widths (eg. try 100.5 or 101).</p> <pre><code>{\n    \"HorizontalScreenCoverage\": 80\n}</code></pre> <p></p> <p>Suggested by baslas</p>"},{"location":"v2/settings/size-and-align/#vertical-offset","title":"Vertical Offset","text":"<p>How much room to leave between the top of the terminal and the top of the screen.</p> <pre><code>{\n  // How much room to leave between the top of the terminal and the top of the screen\n  \"VerticalOffset\": 50\n}</code></pre>"},{"location":"v2/settings/size-and-align/#vertical-screen-coverage","title":"Vertical Screen Coverage","text":"<p>The vertical space that is taken up by the terminal window can be configured through \"VerticalScreenCoverage\".</p> <pre><code>{\n  // How far the terminal should come down, in percentage (eg. 50 = half way, 100 = full screen)\n  \"VerticalScreenCoverage\": 60\n}</code></pre> <p></p> <p>Suggested by ukWaqas</p> <p></p> <p>Suggested by Neil Santos</p>"},{"location":"v2/settings/size-and-align/#maximize-after-toggle","title":"Maximize After Toggle","text":"<p>Whether to maximize the terminal after it has toggled into view. Note that this only applies when both <code>HorizontalScreenCoverage</code> and <code>VerticalScreenCoverage</code> are at least 100.</p> <p>This is to fix the issue where the terminal columns don't line up with the width and height of the screen.</p> <p>Since the terminal sizes in incremental values of 1 column, 100% horizontal coverage can actually mean slightly under the full width of the screen.</p> <p>Defaults to <code>true</code>.</p> <pre><code>{\n    \"MaximizeAfterToggle\": true\n}</code></pre>"}]}